(function () {
    'use strict';

    angular
        .module('demoApp', ['ngMaterial', 'ngSanitize', 'ngAnimate', 'oitozero.ngSweetAlert', 'vAccordion'])

        .constant('BASE_URL', window.location.origin)

        .config(["$mdThemingProvider", function ($mdThemingProvider) {
            $mdThemingProvider.theme('default')
                .primaryPalette('red')
                .accentPalette('pink');
        }]);

}());


(function(){
'use strict';

angular.module('demoApp')
    .factory('simulationServices', ['$rootScope', '$timeout', '$q', 'gmapServices', 'airportServices', simulationServices]);

    function simulationServices ($rootScope, $timeout, $q, gmapServices, airportServices) {
        var service = {};

         var infowindow = gmapServices.createInfoWindow(),
            gate7Position = {"lat": 37.37062979352191, "lng": -121.9312124040552}
         ;

         service.start = start;

        function start () {
            guyLanded()
                .then(function(){
                    showNextGate();
                });
        }

        // guy landed at gate 7
        function guyLanded() {
            var dfd = $q.defer();
            $timeout(function(){
                gmapServices.streetviewPanorama.setPosition(gate7Position);
                gmapServices.panTo(gate7Position);
                dfd.resolve();
            }, 100);

            return dfd.promise;
        }

        // show path to next gate for connecting flight
        function showNextGate() {
            var gate17Marker = _.findWhere(airportServices.gates, {gateNo: '17'});

            $timeout(function () {
                gmapServices.triggerEvent(gate17Marker, 'click');
                gmapServices.streetviewPanorama.addListener('position_changed', function () {
                    var mapBounds = gmapServices.map.getBounds(),
                        currentPosition = gmapServices.streetviewPanorama.getPosition()
                        ;
                    if (!mapBounds.contains(currentPosition)) gmapServices.panTo(currentPosition);
                });
            }, 300);
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('placesServices', ['$rootScope', 'gmapServices', 'AIRPORT_PLACES', 'airportServices', 'airportUtils', placesServices]);

    function placesServices ($rootScope, gmapServices, AIRPORT_PLACES, airportServices, airportUtils) {
        var service = {};

        service.places = [];

        service.markerGeneratedPath = {
            path: [],
            polyline: null
        };

        service.lastPlacePolyline = null;


        var placeInfowindow = gmapServices.createInfoWindow('');

        service.loadPlaces = loadPlaces;
        service.clearPlacesPath = clearPlacesPath;

        function loadPlaces() {
            AIRPORT_PLACES.forEach(function (place) {
                var icon = 'images/markers/poi/' + place.type + '.png';
                var marker = gmapServices.createCustomMarker(place.position, icon, {zIndex: 1});
                marker.type = place.type;
                marker.name = place.name;

                marker.polyline = computePlacePath(place.position);
                marker.stopPosition = marker.polyline.getPath().getAt(0);

                gmapServices.addListener(marker, 'click', function () {
                    //placeInfowindow.setContent(createPlaceContent(place));
                    //gmapServices.showInfoWindow(placeInfowindow, marker);

                    if(service.lastPlacePolyline) gmapServices.hidePolyline(service.lastPlacePolyline);

                    var _placePosition = marker.getPosition();

                    service.markerGeneratedPath.path = computeGeneratedPath(airportServices.startPosition, _placePosition);

                    gmapServices.panTo(_placePosition);
                    gmapServices.showPolyline(marker.polyline);

                    service.lastPlacePolyline = marker.polyline;

                    $rootScope.$broadcast('new-place-route', {stop: marker.stopPosition, placePosition: _placePosition, placeName: marker.name, placePath: service.markerGeneratedPath.path});

                    // proceed to place
                    //      * get the nearest latlng attached to the path (polyline)
                    // update eta to gate
                    $rootScope.$broadcast('update-eta', {addStops:  {name: marker.name, position: _placePosition, eta: marker.polyline.eta}});
                });

                service.places.push(marker);
            });
        }

        function clearPlacesPath () {
            service.places.forEach(function(place){
               gmapServices.hidePolyline(place.polyline);
            });
        }

        function computePlacePath (placePosition) {
            var nearestPoint = airportUtils.getNearestPointFromPath(placePosition, airportServices.completePath);
            //var near = gmapServices.createLetterMarker('A');
            //near.setPosition(nearestPoint);

            var polyline = gmapServices.createDashedPolyline([nearestPoint, placePosition], '#2ebbb5');
            gmapServices.hidePolyline(polyline);

            polyline.eta = airportUtils.computeETARaw(nearestPoint, placePosition);

            return polyline;
        }

        function computeGeneratedPath(currentPosition, placePosition) {
            return airportUtils.computeGeneratedPath(currentPosition, placePosition, airportServices.completePath);
        }

        function createPlaceContent(place) {
            var content = '<h2 style="margin:0px;"><b>' + place.name + '</b></h2>';
            content += '<p style="text-align:center;color:#95a5a6;font-weight:600;text-transform: uppercase;margin:0px;">' + place.type + '</p>';

            return content;
        }

        return service;
    }
}());
(function(){
    'use strict';

    angular.module('demoApp')
        .factory('gmapServices', ['$rootScope', gmapServices]);

    function gmapServices($rootScope) {
        var service = {};

        //infowindow balloons
        service.INFO_WINDOWS = [];

        service.ZOOM_OUT_LEVEL = 8;
        service.ZOOM_IN_LEVEL = 17;

        service.map = null;
        service.mapProjection = null;
        service.overlayView = null;

        service.markers = [];

        service.defaultZoom = service.ZOOM_IN_LEVEL + 1;

        service.defaultLatLng = new google.maps.LatLng(37.3693791, -121.9297233);

        // Streetview Panorama object : returned when streetview initialize
        service.streetviewPanorama = null;

        // Maintain only one infobox
        // Prevent from opening multiple infoboxes
        service.lastInfoboxOpen = null;
        service.infoboxes = [];

        /**
         * Service Functions
         */
        service.apiAvailable = apiAvailable;
        service.createMap = createMap;
        service.initializeStreetView = initializeStreetView;
        service.loadHeatmap = loadHeatmap;
        service.showHeatmap = showHeatmap;
        service.hideHeatmap = hideHeatmap;
        service.createInfoBox = createInfoBox;
        service.openInfoBox = openInfoBox;
        service.closeInfoBox = closeInfoBox;
        service.closeAllInfoBox = closeAllInfoBox;
        service.setMapCursorCrosshair = setMapCursorCrosshair;
        service.setMapBounds = setMapBounds;
        service.getBoundsFromPath = getBoundsFromPath;
        service.setMapCursorDefault = setMapCursorDefault;
        service.addMapListener = addMapListener;
        service.getDistanceOfPath = getDistanceOfPath;
        service.fromLatLngToContainerPixel = fromLatLngToContainerPixel;
        service.fromLatLngToDivPixel = fromLatLngToDivPixel;
        service.fromLatLngToPoint = fromLatLngToPoint;
        service.createCoordinate = createCoordinate;
        service.createInfoWindow = createInfoWindow;
        service.createCanvasInfoWindow = createCanvasInfoWindow;
        service.hideCanvasInfoWindow = hideCanvasInfoWindow;
        service.showInfoWindow = showInfoWindow;
        service.hideInfoWindow = hideInfoWindow;
        service.clearInstanceListeners = clearInstanceListeners;
        service.initMarker = initMarker;
        service.createMarker = createMarker;
        service.createCustomMarker = createCustomMarker;
        service.createCircleMarker = createCircleMarker;
        service.panTo = panTo;
        service.panToOffsetLeft = panToOffsetLeft;
        service.showMarker = showMarker;
        service.showMarkers = showMarkers;
        service.hideMarker = hideMarker;
        service.hideMarkers = hideMarkers;
        service.destroyMarker = destroyMarker;
        service.destroyPolyline = destroyPolyline;
        service.centerMarker = centerMarker;
        service.setMapCenter = setMapCenter;
        service.setMapCenterDefault = setMapCenterDefault;
        service.setZoom = setZoom;
        service.setZoomIfGreater = setZoomIfGreater;
        service.setZoomDefault = setZoomDefault;
        service.setZoomInDefault = setZoomInDefault;
        service.createCircle = createCircle;
        service.updateCircle = updateCircle;
        service.initPolygon = initPolygon;
        service.createPolygon = createPolygon;
        service.updatePolygon = updatePolygon;
        service.showPolygon = showPolygon;
        service.hidePolygon = hidePolygon;
        service.resetPolygonFill = resetPolygonFill;
        service.fillPolygon = fillPolygon;
        service.panToPolygon = panToPolygon;
        service.createPolyline = createPolyline;
        service.createCustomPolyline = createCustomPolyline;
        service.createDashedPolyline = createDashedPolyline;
        service.updatePolyline = updatePolyline;
        service.showPolyline = showPolyline;
        service.hidePolyline = hidePolyline;
        service.addListener = addListener;
        service.addListenerOnce = addListenerOnce;
        service.clearInstanceListeners = clearInstanceListeners;
        service.clearListeners = clearListeners;
        service.removeListener = removeListener;
        service.trigger = trigger;
        service.loadKMLByURL = loadKMLByURL;
        service.insertImageMapType = insertImageMapType;
        service.removeOverlayAtIndex = removeOverlayAtIndex;
        service.initializeAutocomplete = initializeAutocomplete;
        service.containsLocation = containsLocation;
        service.triggerEvent = triggerEvent;
        service.createLetterMarker = createLetterMarker;
        service.castLatLngLitToObj = castLatLngLitToObj;
        service.castLatLngArrays = castLatLngArrays;


        function apiAvailable() {
            return typeof window.google === 'object';
        }

        function createMap(mapId) {
            var mapIdLoc = mapId || 'map3d';
            var myMapId = '#' + mapIdLoc;

            if (service.map) return service.map;
            if (!service.apiAvailable()) return null;

            var mapOptions = {
                zoom: service.defaultZoom,
                minZoom: 2,
                center: service.defaultLatLng,
                mapTypeId: google.maps.MapTypeId.MAP,
                mapTypeControlOptions: {
                    position: google.maps.ControlPosition.TOP_RIGHT
                },
                zoomControlOptions: {
                    position: google.maps.ControlPosition.LEFT_BOTTOM
                },
                streetViewControlOptions: {
                    position: google.maps.ControlPosition.LEFT_BOTTOM
                },
                panControl: false
            };

            //$(myMapId).height($(window).height() - (42));

            service.map = new google.maps.Map(document.getElementById(mapIdLoc), mapOptions);


            /* Override Functionality (for POI get position when clicked)*/
            //keep a reference to the original setPosition-function
            var fx = google.maps.InfoWindow.prototype.setPosition;

            //override the built-in setPosition-method
            google.maps.InfoWindow.prototype.setPosition = function () {
                //this property isn't documented, but as it seems
                //it's only defined for InfoWindows opened on POI's
                if (this.logAsInternal) {
                    google.maps.event.addListenerOnce(this, 'map_changed', function () {
                        var map = this.getMap();
                        //the infoWindow will be opened, usually after a click on a POI
                        if (map) {
                            //trigger the click
                            google.maps.event.trigger(map, 'click', {latLng: this.getPosition()});
                        }
                    });
                }
                //call the original setPosition-method
                fx.apply(this, arguments);
            };


            // handle window resize event
            google.maps.event.addDomListener(window, 'resize', function () {
                //$(myMapId).height($(window).height() - (42));
                var center = service.map.getCenter();
                google.maps.event.trigger(service.map, 'resize');
                service.map.setCenter(center);
            });

            return service.map;
        }

        //service.airportPaths = [];

        function StreetviewCloseControl() {
            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.width = '25px';
            controlUI.style.height = '25px';
            controlUI.style.overflow = 'hidden';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.margin = '10px 20px';
            controlUI.style.position = 'absolute';
            controlUI.style.top = '0px';
            controlUI.style.right = '0px';
            controlUI.title = 'Click to Hide Streetview';

            // Set CSS for the control interior.
            var controlImg = document.createElement('img');
            controlImg.id = 'close-streetview-button';
            controlImg.src = 'https://maps.gstatic.com/mapfiles/api-3/images/sv5.png';
            controlImg.style.position = 'absolute';
            controlImg.style.left = '-25px';
            controlImg.style.top = '-86px';
            controlImg.style.width = '164px';
            controlImg.style.height = '112px';
            controlImg.style.border = '0px';
            controlImg.style.padding = '0px';
            controlImg.style.margin = '0px';
            controlImg.style.maxWidth = 'none';
            controlImg.style.cursor = 'pointer';
            controlUI.appendChild(controlImg);

            return controlUI;
        }

        function initializeStreetView (canvasId) {
            var closeControl = new StreetviewCloseControl();

            service.streetviewPanorama = new google.maps.StreetViewPanorama(
                document.getElementById(canvasId), {
                    position: service.defaultLatLng,
                    pov: {
                        heading: -134,
                        pitch: -7
                    },
                    fullscreenControlOptions: {
                        position: google.maps.ControlPosition.TOP_LEFT
                    },
                    panControl: false,
                    addressControl: false,
                    enableCloseButton: false,
                    zoomControl: false
                });

            google.maps.event.addDomListener(window, 'resize', function () {
                $('#'+canvasId).height($(window).height() - (42));
            });

            service.map.setStreetView(service.streetviewPanorama);

            closeControl.index = 1;
            service.streetviewPanorama.controls[google.maps.ControlPosition.TOP_LEFT].push(closeControl);

            //new google.maps.StreetViewCoverageLayer().setMap(service.map);

            $(document).on('click', '#close-streetview-button', function () {
                $rootScope.$broadcast('close-streetview');
            });

            //service.streetviewPanorama.addListener('position_changed', function () {
            //    var mapBounds = service.map.getBounds(),
            //        currentPosition = service.streetviewPanorama.getPosition()
            //    ;
            //    if (!mapBounds.contains(currentPosition)) service.panTo(currentPosition);
            //    console.log('Steetview Position changed: ', JSON.stringify(currentPosition.toJSON()));
            //    //service.airportPaths.push(position.toJSON());
            //});
        }

        function loadHeatmap (_points, _gradient) {
            return new google.maps.visualization.HeatmapLayer({
                data: castLatLngArrays(_points),
                gradient: _gradient
            });
        }

        function showHeatmap (heatmap) {
            if (!service.map) return false;

            if(!heatmap.getMap()) heatmap.setMap(service.map);
        }

        function hideHeatmap(heatmap) {
            if (!service.map) return false;

            if (heatmap.getMap()) heatmap.setMap(null);
        }

        function createInfoBox(template) {
            return new InfoBox({
                content: template || '',
                disableAutoPan: true,
                maxWidth: 0,
                pixelOffset: new google.maps.Size(25, -115),
                //closeBoxMargin: '15px 5px',
                closeBoxURL: 'static/resources/images/close-icon.png',
                isHidden: false,
                pane: 'floatPane',
                enableEventPropagation: true
            });
        }

        function openInfoBox(infobox, marker) {
            if( !(service.map && infobox && marker)) return;

            // Close last infobox open
            if (service.lastInfoboxOpen) service.lastInfoboxOpen.close();

            infobox.open(service.map, marker);

            service.lastInfoboxOpen = infobox;
            service.infoboxes.push(infobox);
        }

        function closeAllInfoBox() {
            service.infoboxes.forEach(function(infobox, index) {
               if(infobox) {
                   infobox.close();
               }
            });
        }

        function closeInfoBox() {
            if (service.lastInfoboxOpen) service.lastInfoboxOpen.close();
        }

        function addMapListener(eventName, callback) {
            if (service.map) {
                return service.addListener(service.map, eventName, callback);
            }
            return null;
        }

        function setMapCursorDefault() {
            if (service.map) service.map.setOptions({draggableCursor: null});
        }

        function setMapCursorCrosshair() {
            if (service.map) service.map.setOptions({draggableCursor: 'crosshair'});
        }

        function setMapBounds(bounds) {
            if (service.map) service.map.fitBounds(bounds);
        }

        function getBoundsFromPath(path) {
            if (!service.apiAvailable()) return null;
            var bounds = new google.maps.LatLngBounds();
            for (var index = 0; index < path.length; index++) {
                var point = path[index];
                bounds.extend(point);
            }
            return bounds;
        }

        function getDistanceOfPath(path) {
            if (!service.apiAvailable()) return 0;
            return google.maps.geometry.spherical.computeLength(path);
        }

        function fromLatLngToContainerPixel(latlng) {
            if (service.overlayView) {
                return service.overlayView.getProjection().fromLatLngToContainerPixel(latlng);
            }
            return new google.maps.Point();
        }

        function fromLatLngToDivPixel(latlng) {
            if (service.overlayView) {
                return service.overlayView.getProjection().fromLatLngToDivPixel(latlng);
            }
            return new google.maps.Point();
        }

        function fromLatLngToPoint(latlng) {
            if (service.map) {
                var numTiles = 1 << service.map.getZoom();
                var projection = new MercatorProjection();
                var worldCoordinate = projection.fromLatLngToPoint(latlng);
                return new google.maps.Point(
                    worldCoordinate.x * numTiles,
                    worldCoordinate.y * numTiles
                );
            } else {
                return new google.maps.Point();
            }
        }

        function createCoordinate(latitude, longitude) {
            return new google.maps.LatLng(latitude, longitude);
        }

        function createInfoWindow(content) {
            if (!service.apiAvailable()) return null;
            return new google.maps.InfoWindow({content: content});
        }

        function createCanvasInfoWindow() {
            if (!service.apiAvailable()) return null;

            return new CanvasInfoWindow(service.map);
        }

        function hideCanvasInfoWindow(infoWindow) {
            if (infoWindow) infoWindow.hideInfowindow();
        };

        function showInfoWindow(infoWindow, target) {
            if (infoWindow) infoWindow.open(service.map, target);
        }

        function hideInfoWindow(infoWindow) {
            if (infoWindow) infoWindow.close();
        }

        function clearInstanceListeners(_instance) {
            google.maps.event.clearInstanceListeners(_instance);
        }

        function initMarker(_position, _icon, _opts) {
            if (!service.apiAvailable()) return null;

            var additionalOpts = _opts || {};

            var opts = angular.extend({}, {
                position: _position,
                //map: service.map,
                icon: _icon
            }, additionalOpts);

            return new google.maps.Marker(opts);
        }

        function createMarker(_position, _color) {
            _color = _color || service.MARKER_ICONS.RED;
            var marker = service.initMarker(_position, _color);

            service.markers.push(marker);

            return marker;
        }

        function createCustomMarker(_position, _icon, _opts) {
            var opts = _opts || {},
                icon = _icon || 'images/markers/default-marker.png';

            return service.initMarker(_position, icon, opts);
        }

        function createCircleMarker(_position, color) {
            var icon = {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 5,
                fillColor: color || '#6ac1ff',
                fillOpacity: 1,
                strokeColor: 'black',
                strokeWeight: 1
            };

            var marker = service.initMarker(_position, icon);
            service.markers.push(marker);

            return marker;
        }

        function panTo(_position) {
            if (!service.map) return;

            service.map.panTo(_position);
        }

        function panToOffsetLeft(_position, _offset) {
            var offset = _offset || 0.013;
            var latLng = {};

            if(_position instanceof google.maps.LatLng) {
                console.log('object latlng');
                latLng.lat = _position.lat();
                latLng.lng = _position.lng() + offset;
            } else{
                latLng = _position;
                latLng.lng += offset;
            }

            this.panTo(latLng);
        }

        function showMarker(marker) {
            if (marker && marker instanceof google.maps.Marker) marker.setMap(service.map);
        }

        function showMarkers(markerArray) {
            markerArray.forEach(function (marker) {
                service.showMarker(marker);
            });
        }

        function hideMarker(marker) {
            if (marker && marker instanceof google.maps.Marker) marker.setMap(null);
        }

        function hideMarkers(markerArray) {
            markerArray.forEach( function(marker) {
                service.hideMarker(marker);
            });
        }

        function destroyPolyline(polyline) {
            if (polyline && polyline instanceof google.maps.Polyline) polyline.setMap(null);
            service.clearInstanceListeners(polyline);
            polyline = null;
        }

        function destroyMarker(marker) {
            if (marker instanceof Cluster) {
                marker.remove();
            }
            else if (marker instanceof google.maps.Marker) {
                service.hideMarker(marker);
                service.clearInstanceListeners(marker);
            }
            marker = null;
        }

        function centerMarker(marker) {
            if (service.map) {
                service.map.setCenter(marker.position);
            }
        }

        function setMapCenter(coordinates) {
            if (service.map) {
                service.map.setCenter(coordinates);
            }
        }

        function setMapCenterDefault() {
            service.setMapCenter(service.defaultLatLng);
        }

        function setZoom(zoomValue) {
            if (service.map) {
                service.map.setZoom(zoomValue);
            }
        }

        function setZoomIfGreater(zoomValue) {
            if (zoomValue > service.map.getZoom())
                service.setZoom(zoomValue);
        }

        function setZoomDefault() {
            service.setZoom(service.defaultZoom);
        }

        function setZoomInDefault() {
            service.setZoom(service.ZOOM_IN_LEVEL);
        }

        function createCircle(latitude, longitude, radius) {
            if (!service.apiAvailable()) return null;
            var latlng = new google.maps.LatLng(latitude, longitude);
            var circleOptions = {
                center: latlng,
                clickable: false,
                draggable: false,
                editable: false,
                fillColor: '#ffffff',
                fillOpacity: 0,
                map: service.map,
                radius: radius,
                strokeColor: '#0000ff',
                strokeOpacity: 0.9,
                strokeWeight: 2,
                zIndex: 100
            };
            return new google.maps.Circle(circleOptions);
        }

        function updateCircle(circle, latitude, longitude, radius) {
            if (circle) {
                circle.setCenter({lat: latitude, lng: longitude});
                circle.setRadius(radius);
            }
        }

        function initPolygon(path, _color) {
            if (!service.apiAvailable()) return null;

            var strokeColor = _color || '#0000ff';

            var polygonOptions = {
                path: path,
                clickable: false,
                draggable: false,
                editable: false,
                fillColor: strokeColor,
                fillOpacity: 0,
                strokeColor: strokeColor,
                strokeOpacity: 0.9,
                strokeWeight: 2,
                zIndex: 100
            };
            return new google.maps.Polygon(polygonOptions);
        }

        function createPolygon(path, _color) {
            var polygon = service.initPolygon(path, _color);

            polygon.setMap(service.map);

            return polygon;
        }

        function updatePolygon(polygon, path) {
            if (polygon) polygon.setPath(path);
        }

        function showPolygon(polygon) {
            if (polygon) polygon.setMap(service.map);
        }

        function hidePolygon(polygon) {
            if (polygon) polygon.setMap(null);
        }

        function resetPolygonFill(polygon) {
            polygon.setOptions({
                fillOpacity: 0
            });
        }

        function fillPolygon(polygon) {
            polygon.setOptions({
                fillOpacity: 0.5
            });
        }

        function panToPolygon(polygon) {
            if (!service.map || !polygon) return;

            var bounds = new google.maps.LatLngBounds();

            polygon.getPath().forEach( function(path){
                bounds.extend(path);
            });

            service.panTo(bounds.getCenter());
        }

        function createCustomPolyline(path, opts) {
            if (!service.apiAvailable()) return null;

            var polylineOptions = angular.extend({}, {path: path, map: service.map}, opts);

            return new google.maps.Polyline(polylineOptions);
        }

        function createPolyline(path, lineColor) {
            var polylineOptions = {
                clickable: true,
                draggable: false,
                editable: false,
                strokeColor: lineColor || '#ff0000',
                strokeOpacity: 1,
                strokeWeight: 2,
                zIndex: 100,
                geodesic: true
            };

            return createCustomPolyline(path, polylineOptions);
        }

        function createDashedPolyline(path, lineColor) {
            if (!service.apiAvailable()) return null;

            var lineSymbol = {
                path: 'M 0,-1 0,1',
                strokeOpacity: 1,
                scale: 2
            };

            var polylineOptions = {
                path: path,
                map: service.map,
                strokeColor: lineColor || '#ff0000',
                icons: [{
                    icon: lineSymbol,
                    //offset: '0',
                    repeat: '13px'
                }],
                strokeOpacity: 0
            };
            return new google.maps.Polyline(polylineOptions);
        }

        function updatePolyline(polyline, path) {
            if (polyline) polyline.setPath(path);
        }

        function showPolyline(polyline) {
            if (polyline) polyline.setMap(service.map);
        }

        function hidePolyline(polyline) {
            if (polyline) polyline.setMap(null);
        }

        function addListener(instance, eventName, handler) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListener(instance, eventName, handler);
        }

        function addListenerOnce(instance, eventName, handler, capture) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListenerOnce(instance, eventName, handler, capture);
        }

        function clearInstanceListeners(instance) {
            if (service.apiAvailable())
                google.maps.event.clearInstanceListeners(instance);
        }

        function clearListeners(instance, eventName) {
            if (service.apiAvailable())
                google.maps.event.clearListeners(instance, eventName);
        }

        function removeListener(listener) {
            if (service.apiAvailable())
                google.maps.event.removeListener(listener);
        }

        function trigger(instance, eventName, args) {
            if (service.apiAvailable())
                google.maps.event.trigger(instance, eventName, args);
        }

        function loadKMLByURL(srcUrl, kmlOptions) {
            if (service.map) {
                var opt = {
                    url: srcUrl,
                    map: service.map,
                    preserveViewport: true
                };

                if (kmlOptions) {
                    opt = angular.extend({}, opt, kmlOptions);
                }

                return new google.maps.KmlLayer(opt);
            }
            return null;
        }

        function insertImageMapType(srcUrl, insertIndex) {
            if (!service.apiAvailable()) return;

            var _insertIndex = insertIndex || 0;

            var imageTile = new google.maps.ImageMapType({
                getTileUrl: function (coord, zoom) {
                    var z2 = Math.pow(2, zoom);
                    var y = coord.y,
                        x = coord.x >= 0 ? coord.x : z2 + coord.x

                    return srcUrl + '/' + zoom + "/" + x + "/" + y + ".png";
                },
                tileSize: new google.maps.Size(256, 256),
                isPng: true,
                opacity: 1.0
            });

            service.map.overlayMapTypes.insertAt(_insertIndex, imageTile);

            return _insertIndex;
        }

        function removeOverlayAtIndex(index) {
            service.map.overlayMapTypes.setAt(index, null);
        }

        function initializeAutocomplete(elementId) {
            var input = document.getElementById(elementId);
            var autocomplete = new google.maps.places.Autocomplete(input, {
                types: ["geocode"]
            });

            autocomplete.bindTo('bounds', service.map);

            return autocomplete;
        }

        function containsLocation (latLng, polygon) {
            if(!polygon) return;

            return google.maps.geometry.poly.containsLocation(latLng, polygon);
        }

        function triggerEvent (obj, event) {
            google.maps.event.trigger(obj, event);
        }

        function createLetterMarker(char, bgColor, title, fontColor) {
            var _bgColor = bgColor || 'dd4433',
                _title = title || '',
                _fontColor = fontColor || 'FFFFFF';

            var iconUrl = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld='
            iconUrl += char + '|';
            iconUrl += _bgColor + '|';
            iconUrl += _fontColor + '|';

            return new google.maps.Marker({
                title: _title,
                icon: iconUrl,
                //icon: new google.maps.MarkerImage(iconUrl,
                //    new google.maps.Size(21, 34),
                //    new google.maps.Point(0, 0),
                //    new google.maps.Point(10, 33)),
                map: service.map
            });
        }

        function castLatLngArrays(latLngArray) {
            var array = [];
            latLngArray.forEach(function(latLng){
                array.push(castLatLngLitToObj(latLng));
            });
            return array;
        }

        function castLatLngLitToObj (latLngLit) {
            if(latLngLit instanceof google.maps.LatLng) return latLngLit;
            return new google.maps.LatLng(latLngLit);
        }

        return service;
    }
}());


(function () {
'use strict';

angular.module('demoApp')
    .factory('alertServices', ['$mdToast', 'SweetAlert', alertServices]);

    function alertServices($mdToast, SweetAlert) {
        var service = {};

        service.showTopRightToast = showTopRightToast;
        service.proceedingToGate = proceedingToGate;
        service.arrivedOnGatePrompt = arrivedOnGatePrompt;

        service.showInsufficientTimeWarning = showInsufficientTimeWarning;

        function showTopRightToast(message) {
            $mdToast.show(
                $mdToast.simple()
                    .textContent(message)
                    .position('top right')
                    .hideDelay(2000)
            );
        }

        function proceedingToGate(gateNo) {
            service.showTopRightToast('Proceeding to Gate ' + gateNo);
        }

        function arrivedOnGatePrompt (gateNo) {
            service.showTopRightToast('You are on Gate ' + gateNo);
        }

        function showInsufficientTimeWarning (timeRemaining) {
            var minsStr = timeRemaining.minutes > 1 ? ' minutes' : ' minute';
            var _title = timeRemaining.minutes > 0
                        ? 'You have ' + timeRemaining.minutes + minsStr
                        : 'You have no time';

            if(timeRemaining.seconds > 0) _title += ' and ' + timeRemaining.seconds + ' seconds';

            _title += ' left.';

            SweetAlert.swal({
                title: _title,
                type: 'warning'
            });
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('airportUtils', ['gmapServices', 'AVERAGE_WALKING_TIME', airportUtils]);

    function airportUtils (gmapServices, AVERAGE_WALKING_TIME) {
        var service = {};

        service.getFormattedTime = getFormattedTime;
        service.computeTimeRaw = computeTimeRaw;
        service.computeTime = computeTime;
        service.computeDistance = computeDistance;
        service.computeLength = computeLength;
        service.computeHeading = computeHeading;
        service.computeETARaw = computeETARaw;
        service.computeETA = computeETA;
        service.computeETAByDistance = computeETAByDistance;
        service.getPlaceIcon = getPlaceIcon;
        service.extractCoords = extractCoords;
        service.extractAndCastCoords = extractAndCastCoords;
        service.getPathFromPolyline = getPathFromPolyline;
        service.getNearestPointFromPath = getNearestPointFromPath;
        service.computeGeneratedPath = computeGeneratedPath;


        function getFormattedTime(time) {
            return time < 1
                ? (time * 60).toFixed(0) + ' sec'
                : time.toFixed(1) + ' mins'
                ;
        }

        function computeTimeRaw(distance) { //returns time in minutes
            var distanceKm = distance / 1000;
            var time = (distanceKm / AVERAGE_WALKING_TIME) * 60; // 60 minutes

            return time;
        }

        /*
         * params: distance in meters
         * time = distance / speed
         * return time in seconds
         */
        function computeTime(distance) {
            return getFormattedTime(computeTimeRaw(distance));
        }

        function computeDistance (point1, point2) {
            return google.maps.geometry.spherical.computeDistanceBetween(
                gmapServices.castLatLngLitToObj(point1),
                gmapServices.castLatLngLitToObj(point2)
            );
        }

        function computeLength (latLngArray) {
            return google.maps.geometry.spherical.computeLength(latLngArray);
        }

        function computeHeading (point1, point2) {
            return google.maps.geometry.spherical.computeHeading(
                gmapServices.castLatLngLitToObj(point1),
                gmapServices.castLatLngLitToObj(point2)
            );
        }

        function computeETARaw(point1, point2) {
            var distance = service.computeDistance(
                point1,
                point2
            );

            return service.computeTimeRaw(distance);
        }

        function computeETA (point1, point2) {
            var distance = service.computeDistance(
                point1,
                point2
            );

            return service.computeTime(distance);
        }

        function computeETAByDistance(distance) {
            return service.computeTimeRaw(distance);
        }

        function getPlaceIcon(placeType) {
            switch (placeType) {
                case 'store':
                    return 'local_mall';
                case 'food':
                    return 'local_dining';
                case 'bar':
                    return 'local_bar';
                case 'coffee':
                    return 'local_cafe';
                case 'atm':
                    return 'local_atm';
                case 'currency_exchange':
                    return 'attach_money';

                //case 'store':
                //    return '&#xE54C;';
                //case 'food':
                //    return '&#xE556;';
                //case 'bar':
                //    return '&#xE540;';
                //case 'coffee':
                //    return '&#xE541;';
                //case 'atm':
                //    return '&#xE53E;';
                //case 'currency_exchange':
                //    return '&#xE227;';
            }
        }

        function extractCoords(paths) {
            var coordsArray = [];
            paths.forEach(function (path) {
                coordsArray.push(path.position);
            });
            return coordsArray;
        }

        function extractAndCastCoords(paths) {
            var coordsArray = [];
            paths.forEach(function (path) {
                coordsArray.push(gmapServices.castLatLngLitToObj(path.position));
            });
            return coordsArray;
        }

        function getPathFromPolyline(latLng, completePath) {
            var temp = {},
                last = {};

            if(!completePath) return

            completePath.forEach(function (pos, i) {
                if (i == 0) {
                    last.distance = service.computeDistance(
                        pos.position,
                        latLng
                    );
                    last.position = pos.position;
                    last.index = i;
                }

                var currentPos = completePath[i + 1];

                if (i < completePath.length - 1) {
                    temp.distance = service.computeDistance(
                        currentPos.position,
                        latLng
                    );
                    temp.position = currentPos.position;
                    temp.index = i;

                    if (temp.distance < last.distance) {
                        last = angular.copy(temp);
                    }
                }
                return;
            });

            return last;
        }

        function getNearestPointFromPath(position, path) {
            var nearest = getPathFromPolyline(position, path);

            return nearest.position;
        }

        function computeGeneratedPath(currentPosition, placePosition, completePath) {
            var currentPositionApprox = getPathFromPolyline(currentPosition, completePath),
                destinationApprox = getPathFromPolyline(placePosition, completePath)
                ;

            return destinationApprox.index <= currentPositionApprox.index
                ? completePath.slice(destinationApprox.index + 1, currentPositionApprox.index + 2).reverse()
                : completePath.slice(currentPositionApprox.index + 1, destinationApprox.index + 2)
                ;
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('airportServices', ['$rootScope', 'AIRPORT_GATES', 'AIRPORT_PATHS', 'AIRPORT_EXTENDED_PATHS',
        'AIRPORT_SOUTH_PATHS', 'RAW_EXTENDED_PATHS', 'PEOPLE_LOCATIONS', 'PEOPLE_HEATMAP_GRADIENT', '$timeout',
        'gmapServices', 'alertServices', 'airportUtils', airportServices]);

    function airportServices ($rootScope, AIRPORT_GATES, AIRPORT_PATHS, AIRPORT_EXTENDED_PATHS,
                              AIRPORT_SOUTH_PATHS, RAW_EXTENDED_PATHS, PEOPLE_LOCATIONS, PEOPLE_HEATMAP_GRADIENT, $timeout,
                              gmapServices, alertServices, airportUtils) {
        var service = {};

        var startPoint = {lat: 37.3693791, lng: -121.9297233},
            entranceMarker = null,
            airportPathPolyline = null
        ;

        var currentPosition = null,
            destination = null
        ;

        service.completePath = null;
        service.generatedPath = null;
        service.placeGeneratedPath = null;

        service.gatePath = null;

        service.placeStop = null;

        var placePosition = null;

        var defaultPitch = -7,
            directionsPathPolyline = null,
            animationSpeedByMillis = 2000,
            //animationSpeedByMillis = 500,
            pathCtr = 0,
            animationTimeout = null
        ;

        var placeAnimationTimeout = null;

        var placesDirectionsPathPolyline = null;

        service.gates = [];

        var arrivedAtPlace = false;

        service.peopleHeatmap = null;

        service.startPosition = null;
        service.stopAnimation = false;

        service.initialize = initialize;
        service.toggleGates = toggleGates;
        service.togglePeopleDensityHeatmap = togglePeopleDensityHeatmap;
        service.computeDirection = computeDirection;
        service.continueAnimation = continueAnimation;
        service.startMoving = startMoving;

        var persons = [];

        function initialize () {
            gmapServices.defaultLatLng = startPoint;

            gmapServices.createMap('map-canvas');

            service.peopleHeatmap = gmapServices.loadHeatmap(PEOPLE_LOCATIONS, PEOPLE_HEATMAP_GRADIENT);

            loadPath();
            loadGates();

            $rootScope.$on('new-place-route', function(event, params){
                arrivedAtPlace = false;

                placePosition = params.placePosition;

                gmapServices.streetviewPanorama.setPosition(service.startPosition);
                service.placeGeneratedPath = computeDirection(service.startPosition, params.placePosition);

                placesDirectionsPathPolyline = showPath(service.placeGeneratedPath, placesDirectionsPathPolyline, '#2ebbb5');

                //update directionsPathPolyline
                gmapServices.hidePolyline(directionsPathPolyline);

                recomputeMainPath(params.placePosition);

                service.stopAnimation = true;

                if(placeAnimationTimeout) {
                    $timeout.cancel(placeAnimationTimeout);
                }
            });

            gmapServices.addMapListener('click', function(e){
                var pos = e.latLng.toJSON();
                persons.push(pos);
                //console.log('Clicked Position: ', pos);
            });

            $(document).keypress(function (e) {
                if (e.which == 32) {
                    //alert('You pressed enter!');
                    console.log('Persons: ', JSON.stringify(persons));
                } else if (e.which == 13) {
                    persons = [];
                    console.log('Persons: ', JSON.stringify(persons));
                }
            });

        }

        function loadPath () {
            if (!airportPathPolyline) {
                //var extendedPaths = convertJsonToArray(AIRPORT_EXTENDED_PATHS);

                var firstPath = angular.copy(AIRPORT_PATHS).reverse();
                service.completePath = firstPath.concat(AIRPORT_SOUTH_PATHS);

                var paths = airportUtils.extractCoords(service.completePath),
                    opts = {strokeColor: '#00ff00', strokeOpacity: 0, strokeWeight: 1.5};

                airportPathPolyline = gmapServices.createCustomPolyline(paths, opts);
            }
        }

        /* Gates Functions */

        function loadGates () {
            entranceMarker = gmapServices.createCustomMarker(startPoint, 'images/markers/entrance.png');
            gmapServices.showMarker(entranceMarker);

            for (var gateNo in AIRPORT_GATES) {
                var gate = AIRPORT_GATES[gateNo];
                gate.gateNo = gateNo;

                gate.gateIcon = 'images/markers/gates/' + gateNo + '.png';

                var marker = gmapServices.createCustomMarker(gate.position, gate.gateIcon, {zIndex: 2});
                marker.gate = gate;
                marker.gateNo = gate.gateNo;

                gmapServices.addListener(marker, 'click', function () {
                    if (animationTimeout) {
                        $timeout.cancel(animationTimeout);
                        pathCtr = 0;
                        animationTimeout = null;
                    }

                    proceedGate(this.gate);

                    // broadcast to tell controller show 'Proceed' button
                    $rootScope.$broadcast('marker-clicked');
                    $rootScope.$broadcast('gate-clicked', {gateNo: this.gateNo});
                });

                service.gates.push(marker);
            }

            gmapServices.showMarkers(service.gates);
        }

        var computedPath = null;
        var selectedGate = null;

        function proceedGate(gate) {
            service.placeStop = null;

            //console.log('proceed gate: ', gate);
            pathCtr = 0;
            computedPath = computePath(gate);

            currentPosition = gmapServices.streetviewPanorama.getPosition();
            destination = computedPath[computedPath.length - 1].position;

            service.startPosition = currentPosition;

            if(placesDirectionsPathPolyline && placesDirectionsPathPolyline.getMap()) {
                gmapServices.hidePolyline(placesDirectionsPathPolyline);
            }

            service.generatedPath = computeDirection(currentPosition, destination);
            // Show Polyline for paths
            directionsPathPolyline = showPath(service.generatedPath, directionsPathPolyline, '#2980b9');

            broadcastNavigation(gate, service.generatedPath);

            service.gatePath = angular.copy(service.generatedPath);

            gmapServices.setZoomIfGreater(20);

            selectedGate = gate;
            // start path animation
            //startAnimation(service.generatedPath, gate);
        }

        function startMoving () {
            if (placesDirectionsPathPolyline && !arrivedAtPlace) {
                startPlaceAnimation(service.placeGeneratedPath);
                return;
            }

            startAnimation(service.generatedPath, selectedGate);
        }

        function broadcastNavigation(gate, _path) {
            $rootScope.$broadcast('show-nearby-places', {path: _path});
            $rootScope.$broadcast('show-streetview-panel');
            //alertServices.proceedingToGate(gate.gateNo);
        }

        function computePath (gate) {
            var paths = [];
            if (gate.gateNo >= 1 && gate.gateNo <= 3) {
                paths = AIRPORT_EXTENDED_PATHS[gate.gateNo].slice(0);
            } else {
                var pathSrc = gate.gateNo >= 4 && gate.gateNo <= 11
                        ? AIRPORT_PATHS // paths 1 - 11 here
                        : AIRPORT_SOUTH_PATHS // paths 12 - 28 here
                    ;
                paths = gate.pathIndex
                    ? pathSrc.slice(gate.pathIndex[0], gate.pathIndex[1])
                    : pathSrc.slice(0) // this means it is the last path of the array
                ;
            }
            return paths;
        }

        function computeDirection (currentPosition, destination) {
            var currentPositionApprox = airportUtils.getPathFromPolyline(currentPosition, service.completePath),
                destinationApprox = airportUtils.getPathFromPolyline(destination, service.completePath)
            ;

            return destinationApprox.index <= currentPositionApprox.index
                            ? service.completePath.slice(destinationApprox.index + 1, currentPositionApprox.index + 2).reverse()
                            : service.completePath.slice(currentPositionApprox.index + 1, destinationApprox.index + 2)
            ;
        }

        function showPath (paths, polylineObj, color) {
            var pathsCoords = airportUtils.extractCoords(paths);

            if (polylineObj && polylineObj.getMap()) {
                polylineObj.setPath(pathsCoords);
            } else {
                polylineObj = gmapServices.createDashedPolyline(pathsCoords, color);
            }

            return polylineObj;
        }



        function startAnimation(paths, gate) {
            if (service.stopAnimation) {
                pathCtr = 0;
                service.stopAnimation = false;
                return;
            }

            if (pathCtr >= paths.length) {
                pathCtr = 0;
                gmapServices.streetviewPanorama.setPov({
                    heading: gate.heading,
                    pitch: defaultPitch
                });
                // show alert
                $rootScope.$broadcast('arrived-at-gate', {gateNo: gate.gateNo});
                alertServices.arrivedOnGatePrompt(gate.gateNo);
                return;
            }

            var path = paths[pathCtr++];

            gmapServices.streetviewPanorama.setPosition(path.position);

            try {
                var nextPath = paths[pathCtr];
                var heading = path.heading
                        ? path.heading
                        : airportUtils.computeHeading(
                        path.position,
                        nextPath.position
                    );

                gmapServices.streetviewPanorama.setPov({
                    heading: heading,
                    pitch: defaultPitch
                });


                if (service.placeStop) {
                    var distance = airportUtils.computeDistance(
                        service.placeStop,
                        path.position
                    );

                    if (distance < 1) return;
                }

            } catch (err) {}

            animationTimeout = $timeout(function () {
                startAnimation(paths, gate);
            }, animationSpeedByMillis);
        }



        function startPlaceAnimation(paths) {
            //if (service.stopAnimation) {
            //    pathCtr = 0;
            //    service.stopAnimation = false;
            //    return;
            //}

            if (pathCtr >= paths.length) {
                pathCtr = 0;
                $rootScope.$broadcast('arrived-at-place');
                arrivedAtPlace = true;
                return;
            }

            var path = paths[pathCtr++];
            gmapServices.streetviewPanorama.setPosition(path.position);
            arrivedAtPlace = false;

            try {
                var nextPath = paths[pathCtr];
                var heading = path.heading
                        ? path.heading
                        : airportUtils.computeHeading(
                        path.position,
                        nextPath.position
                    );

                gmapServices.streetviewPanorama.setPov({
                    heading: heading,
                    pitch: defaultPitch
                });


                if (service.placeStop) {
                    var distance = airportUtils.computeDistance(
                        service.placeStop,
                        path.position
                    );

                    if (distance < 1) return;
                }

            } catch (err) {}

            placeAnimationTimeout = $timeout(function () {
                startPlaceAnimation(paths);
            }, animationSpeedByMillis);
        }

        function continueAnimation() {
            if(animationTimeout) {
                $timeout.cancel(animationTimeout);
                startAnimation(service.generatedPath, selectedGate);
            }
        }

        function recomputeMainPath (placePosition) {
            service.generatedPath = computeDirection(placePosition, service.gatePath[service.gatePath.length - 1].position);
            directionsPathPolyline = showPath(service.generatedPath, directionsPathPolyline, '#2980b9');

            $rootScope.$broadcast('recompute-main-path', {path: service.generatedPath});
        }

        /* End Gates Functions */

        function toggleGates (hideMarker) {
            if (hideMarker) {
                gmapServices.hideMarkers(service.gates);
                gmapServices.hideMarker(entranceMarker);
                return;
            }

            gmapServices.showMarkers(service.gates);
            gmapServices.showMarker(entranceMarker);
        }

        function togglePeopleDensityHeatmap (hideHeatmap) {
            if (hideHeatmap) {
                gmapServices.hideHeatmap(service.peopleHeatmap);
                return;
            }

            gmapServices.showHeatmap(service.peopleHeatmap);
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('streetviewController', ['gmapServices', streetviewController]);

    function streetviewController (gmapServices) {
        var vm = this;

        vm.initialize = initialize;

        vm.initialize();

        /* Controller Functions here */

        function initialize () {
            gmapServices.initializeStreetView('streetview-canvas');
        }
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('placesPanelController', ['$rootScope', '$q', 'placesServices', '$mdSidenav', 'gmapServices', 'airportUtils', placesPanelController]);

    function placesPanelController ($rootScope, $q, placesServices, $mdSidenav, gmapServices, airportUtils) {
        var vm = this;

        vm.placesList = {};

        vm.initialize = initialize;
        vm.getMdIcon = getMdIcon;
        vm.showPlaceDirections = showPlaceDirections;

        vm.initialize();

        /* Controller Functions here */

        function initialize () {
            $rootScope.$on('show-nearby-places', function(event, params){
                placesServices.clearPlacesPath();
                calculateNearbyPlaces(params.path)
                    .then(function(){
                        $mdSidenav('placesPanelSidenav')
                            .open();
                    });
            });

            //gmapServices.streetviewPanorama.addListener('position_changed', function () {
            //    var currentPosition = gmapServices.streetviewPanorama.getPosition();
            //    calculateNearbyFromPosition(currentPosition);
            //});
        }

        function showPlaceDirections (placeMarker) {
            gmapServices.triggerEvent(placeMarker, 'click');
        }

        //function calculateNearbyFromPosition(position) {
        //    vm.placesList = {};
        //
        //    // hide places markers
        //    gmapServices.hideMarkers(airportServices.places);
        //
        //    airportServices.places.forEach(function (place) {
        //        var distance = airportUtils.computeDistance(
        //            position,
        //            place.position
        //        );
        //
        //        // if distance within 15 meters
        //        if (distance <= 15) {
        //            if (!vm.placesList[place.type]) vm.placesList[place.type] = [];
        //
        //            var distanceFromStart = airportUtils.computeDistance(
        //                position,
        //                place.position
        //            );
        //
        //            if (!_.findWhere(vm.placesList[place.type], {name: place.name})) {
        //                // show marker
        //                gmapServices.showMarker(place);
        //
        //                //place.distance = distance.toFixed(1);
        //                place.etaTime = airportUtils.computeTime(distanceFromStart);
        //                vm.placesList[place.type].push(place);
        //            }
        //        }
        //    });
        //}

        function calculateNearbyPlaces (path) {
            // TODO: get all the nearby places along the list
            var dfd = $q.defer();
            var startingPosition = path[0].position;
            vm.placesList = {};

            // hide places markers
            gmapServices.hideMarkers(placesServices.places);

            placesServices.places.forEach(function(place){
                path.forEach( function(p){
                    var distance = airportUtils.computeDistance(
                        p.position,
                        place.position
                    );

                    if(distance <= 15) {
                        if (!vm.placesList[place.type]) vm.placesList[place.type] = [];

                        if( !_.findWhere(vm.placesList[place.type], {name: place.name})) {
                            // show marker
                            gmapServices.showMarker(place);

                            //place.distance = distance.toFixed(1);
                            place.etaTime = airportUtils.computeETA(startingPosition, place.position);
                            vm.placesList[place.type].push(place);
                        }
                    }
                });

                //console.log(type + ' place : ' + place.name + '\n Distance: ' + distance.toFixed(1) + ' meters');
            });

            dfd.resolve();

            return dfd.promise;
        }


        function getMdIcon(placeType) {
            return airportUtils.getPlaceIcon(placeType);
        }

    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('indexController', ['$mdSidenav', indexController]);

    function indexController ($mdSidenav) {
        var vm = this;

        vm.toggleLayerPanel = buildToggler('layerPanel');
        vm.toggleSearchPanel = buildToggler('searchPanel');
        vm.closeSideNav = closeSideNav;

        vm.lastSideNavOpenId = '';

        function buildToggler(navID) {
            return function () {
                if (vm.lastSideNavOpenId && vm.lastSideNavOpenId !== navID) {
                    closeSideNav(vm.lastSideNavOpenId);
                }
                $mdSidenav(navID).toggle();
                vm.lastSideNavOpenId = navID;
            }
        }

        function closeSideNav(navID) {
            $mdSidenav(navID).close();
        }
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('gmapController', ['$rootScope', '$scope', '$timeout', '$mdSidenav', 'gmapServices', 'airportServices', 'placesServices', 'simulationServices', gmapController]);

    function gmapController($rootScope, $scope, $timeout, $mdSidenav, gmapServices, airportServices, placesServices, simulationServices) {
        var vm = this;

        vm.hideMarkers = false;
        vm.hideHeatmap = true;
        vm.showStreetview = false;
        vm.showPlacesBtn = false;
        vm.showEtaPanel = false;

        vm.showProceedButton = false;

        vm.initialize = initialize;
        vm.showPlacesList = showPlacesList;
        vm.triggerProceedGate = triggerProceedGate;
        vm.showStreetviewPanel = showStreetviewPanel;
        vm.closePlacesList =  closePlacesList;

        vm.proceedToDirection = proceedToDirection;

        vm.initialize();

        function initialize () {
            airportServices.initialize();

            placesServices.loadPlaces();

            //$scope.$watch(function(){
            //    return vm.hideMarkers;
            //}, function (newValue, oldValue) {
            //    if(newValue === oldValue) return;
            //
            //    airportServices.toggleGates(newValue);
            //});

            $scope.$watch(function () {
                return vm.hideHeatmap;
            }, function (newValue, oldValue) {
                if (newValue === oldValue) return;

                airportServices.togglePeopleDensityHeatmap(newValue);
            });

            $rootScope.$on('show-streetview-panel', function () {
                showStreetviewPanel();
                vm.showEtaPanel = true;
            });

            // Close Streetview, triggers from a custom control on gmapServices
            $rootScope.$on('close-streetview', function(){
                hideStreetviewPanel();
            });

            $rootScope.$on('new-place-route', function (ev, params) {
                //airportServices.continueAnimation();
                //airportServices.placeStop = params.stop;

                vm.showProceedButton = true;
            });

            $rootScope.$on('marker-clicked', function(){
                vm.showProceedButton = true;
            });

            $rootScope.$on('arrived-at-place', function(){
                vm.showProceedButton = true;
            });


            simulationServices.start();

            //gmapServices.addMapListener('click', function(e){
            //    console.log('Position Clicked: ', e.latLng.toJSON());
            //});
        }

        function showPlacesList() {
            $mdSidenav('placesPanelSidenav')
                .open()
                .then(function(){
                    vm.showPlacesBtn = false;
                });
        }

        function triggerProceedGate (gate, event) {
            $mdSidenav('gateListSideNav')
                .close()
                .then(function(){
                    gmapServices.triggerEvent(gate, 'click');
                });
        }

        /* Streetview Functions */

        function showStreetviewPanel () {
            if(!vm.showStreetview) {
                vm.showStreetview = true;

                $timeout(function () {
                    google.maps.event.trigger(gmapServices.streetviewPanorama, 'resize');
                }, 100);
            }
        }

        function hideStreetviewPanel() {
            if (vm.showStreetview) {
                $scope.$apply(function () {
                    vm.showStreetview = false;
                });
            }
        }

        function closePlacesList () {
            $mdSidenav('placesPanelSidenav')
                .close()
                .then(function(){
                    vm.showPlacesBtn = true;
                });
        }

        function proceedToDirection () {
            airportServices.startMoving();
            vm.showProceedButton = false;
        }

        /* End of Streetview Functions */
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('etaPanelController', ['$scope', '$rootScope', '$interval', 'airportUtils', 'airportServices', '$mdDialog', 'gmapServices', 'alertServices', etaPanelController]);

    function etaPanelController ($scope, $rootScope, $interval, airportUtils, airportServices, $mdDialog, gmapServices, alertServices) {
        var vm = this;

        // shows warning when timeElapse is under the specified minutes
        var warningTimeInMinutes = 10;

        var timeElapseInterval, checkTimeRemainingInterval;
        vm.showTimeRemainingInput = false;
        vm.timeRemaining = {
            input: null,
            elapse: null,
            elapseSeconds: null,
            elapseFormatted: {
                minutes: null,
                seconds: null
            }
        };

        vm.etaToDest = null;
        vm.etaToPlace = null;
        vm.totalEta = null;

        vm.placeName = '';
        vm.stops = [];
        vm.etaDetail = '';
        vm.gateNo = '';

        vm.initialize = initialize;
        vm.showDialog = showDialog;
        vm.setTimeRemaining = setTimeRemaining;
        vm.timeRemainingInputKeydown = timeRemainingInputKeydown;

        vm.initialize();

        /* Controller Functions here */

        function initialize () {
            $rootScope.$on('show-nearby-places', function (event, params) {
                vm.etaToDest = computeETA(params.path);
            });

            //$rootScope.$on('update-eta', function (event, params) {
            //    updateETA(params.addStops);
            //});

            $rootScope.$on('gate-clicked', function(e, p){
                $rootScope.$apply(function(){
                    vm.gateNo = p.gateNo;
                    vm.etaToPlace = null;
                    vm.placeName = '';
                });
            });

            $rootScope.$on('new-place-route', function (ev, params) {
                //airportServices.placeStop = params.stop;
               //initialETA = airportUtils.getPathFromPolyline(params.stop, airportServices.generatedPath[generatedPath.length-1].position);
                // update initalETA
                //var near = airportUtils.getPathFromPolyline(params.stop, airportServices.generatedPath);
                //if (near) {
                    //var path = airportServices.generatedPath.slice(near.index, airportServices.generatedPath[airportServices.generatedPath.length - 1].index);
                //$scope.$apply(function(){
                    vm.placeName = params.placeName;
                    vm.etaToPlace = computeETA(params.placePath);
                //});
                //}
            });

            gmapServices.streetviewPanorama.addListener('position_changed', function () {
                var near = airportUtils.getPathFromPolyline(gmapServices.streetviewPanorama.getPosition(), airportServices.generatedPath),
                    nearPlace = airportUtils.getPathFromPolyline(gmapServices.streetviewPanorama.getPosition(), airportServices.placeGeneratedPath);

                if(near) {
                    var path = airportServices.generatedPath.slice(near.index, airportServices.generatedPath[airportServices.generatedPath.length - 1].index);
                    vm.etaToDest = computeETA(path);
                }

                if(nearPlace) {
                    var placePath = airportServices.placeGeneratedPath.slice(nearPlace.index, airportServices.placeGeneratedPath[airportServices.placeGeneratedPath.length - 1].index);
                    vm.etaToPlace = computeETA(placePath);
                }

                if(near || nearPlace) {
                    if (!$scope.$$phase) {
                        $scope.$digest();
                    }
                }
            });

            $rootScope.$on('recompute-main-path', function(e, p) {
                $scope.$apply(function(){
                    vm.etaToDest = computeETA(p.path);
                });
            });


            $scope.$watch(function () {
                return vm.etaToDest;
            }, function (newValue, oldValue) {
                if (newValue === oldValue) return;
                compueTotalETATime();
            });

            $scope.$watch(function () {
                return vm.etaToPlace;
            }, function (newValue, oldValue) {
                if (newValue === oldValue) return;
                compueTotalETATime();
            });

            //$scope.$watchCollection(function(){
            //   return vm.stops;
            //}, updateStops);

            $scope.$watch(function(){
               return vm.timeRemaining.input;
            }, function(newValue, oldValue){
                if(newValue === oldValue) return;

                parseElapseTime(newValue);
            });
        }

        function compueTotalETATime () {
            vm.totalEta = vm.etaToDest + vm.etaToPlace;
            console.log('computing total eta time: ', vm.totalEta);
        }

        function convertSecToMin(sec) {
            return sec / 60;
        }

        function convertMinToSec(min) {
            return min * 60;
        }

        function formatElapseTime(timeElapseSeconds) {
            // format elapse to elapseFormatted MM:SS ex. 4:45
            var minDecimal = convertSecToMin(timeElapseSeconds);
            var timeArray = minDecimal.toString().split('.');

            var s = (minDecimal % 1);
            var seconds = Math.floor(s * 60);

            return {
                minutes: Math.floor(timeArray[0]).toString(),
                seconds: ('0' + seconds).slice(-2)
            };
        }

        function parseElapseTime (minutes) {
            if(angular.isDefined(timeElapseInterval)) $interval.cancel(timeElapseInterval);
            if(angular.isDefined(checkTimeRemainingInterval)) $interval.cancel(checkTimeRemainingInterval);

            // copy minutes to timeRemaining.elapse
            vm.timeRemaining.elapse = angular.copy(minutes);
            vm.timeRemaining.elapseSeconds = convertMinToSec(vm.timeRemaining.elapse);
            vm.timeRemaining.elapseFormatted = formatElapseTime(vm.timeRemaining.elapseSeconds);

            // start countdown
            startElapseCountdown();
        }

        function startElapseCountdown () {
            vm.timeRemaining.elapseSeconds = convertMinToSec(vm.timeRemaining.elapse);

            timeElapseInterval = $interval(function(){
                if(vm.timeRemaining.elapseSeconds > 0) {
                    vm.timeRemaining.elapseSeconds--;
                    vm.timeRemaining.elapse = convertSecToMin(vm.timeRemaining.elapseSeconds);
                    vm.timeRemaining.elapseFormatted = formatElapseTime(vm.timeRemaining.elapseSeconds);
                }
            }, 1000);

            // checks time every minute
            checkTimeRemainingInterval = $interval(function(){
                if((vm.timeRemaining.elapse - warningTimeInMinutes) < vm.totalEta) {
                    alertServices.showInsufficientTimeWarning(vm.timeRemaining.elapseFormatted);

                    if(vm.timeRemaining.elapseSeconds < 1) $interval.cancel(checkTimeRemainingInterval);
                }
            }, 60000);
        }

        /* Non Scope Functions here */

        function computeETA(path) {
            var distance = airportUtils.computeLength(airportUtils.extractAndCastCoords(path));
            //initialETA = airportUtils.computeTimeRaw(distance);
            //vm.etaToDest = initialETA;
            //vm.stops = [];
            //vm.etaDetail = '';
            return airportUtils.computeTimeRaw(distance);
        }

        //function updateETA (addStops) {
        //    vm.stops.push(addStops);
        //}

        //function updateStops (newValue) {
        //    if(newValue == 0) return;
        //
        //    vm.etaDetail = '';
        //
        //    var totalETA = 0;
        //    totalETA += initialETA;
        //
        //    vm.etaDetail += '<h3><b>'+ airportUtils.getFormattedTime(initialETA) +'</b></h3><br>';
        //
        //    newValue.forEach(function(place){
        //        totalETA += place.eta;
        //        vm.etaDetail += '<b>' + place.name + '</b>: '+ airportUtils.getFormattedTime(place.eta) + '<br>';
        //    });
        //
        //    vm.etaToDest = totalETA;
        //}


        function showDialog (ev) {
            $mdDialog.show(
                $mdDialog.alert()
                    .parent(angular.element(document.querySelector('body')))
                    .clickOutsideToClose(true)
                    .title('ETA Detail')
                    .htmlContent(vm.etaDetail)
                    .ariaLabel('ETA Detail Dialog')
                    .ok('Close')
                    .targetEvent(ev)
            );
        }

        function setTimeRemaining () {
            vm.showTimeRemainingInput = false;
        }

        function timeRemainingInputKeydown (event) {
            //console.log('keyCode: ',event.keyCode);
            if(event.keyCode === 13) setTimeRemaining();
        }

    }
}());
(function () {
    'use strict';

    var paths = [
        //start 12
        { // 0
            position: {"lat": 37.36937906066721, "lng": -121.92972332032843}
        },
        {
            position: {"lat": 37.36934967690365, "lng": -121.92968970403211}
        },
        {
            position: {"lat": 37.36931814552749, "lng": -121.92965421883969}
        },
        {
            position: {"lat": 37.36928795076454, "lng": -121.92962047448748}
        },
        {
            position: {"lat": 37.36925946472058, "lng": -121.92958750816962}
        },
        {
            position: {"lat": 37.36922707333164, "lng": -121.9295506445115}
        },
        {
            position: {"lat": 37.3691962971881, "lng": -121.92951472087088}
        },
        {
            position: {"lat": 37.36918285933456, "lng": -121.92946991865261}
        },
        { // 8
            position: {"lat": 37.36918159377171, "lng": -121.92941816027098}
        },
        //end 12

        //start 13
        { // 9
            position: {"lat": 37.36918007518331, "lng": -121.92937146917808}
        },
        {
            position: {"lat": 37.36917868858202, "lng": -121.92931607220783}
        },
        {
            position: {"lat": 37.36917405154843, "lng": -121.92928220143767}
        },
        {
            position: {"lat": 37.36914547205342, "lng": -121.92924900195999}
        },
        {
            position: {"lat": 37.36911339273504, "lng": -121.9292140223668}
        },
        {
            position: {"lat": 37.36908711964267, "lng": -121.92918451615787}
        },
        {
            position: {"lat": 37.36905896233264, "lng": -121.92915357023281}
        },
        { // 16
            position: {"lat": 37.36902935565628, "lng": -121.92912043113}
        },
        //end 13

        //start 14
        { //17
            position: {"lat": 37.3690021213436, "lng": -121.92909030182807}
        },
        {
            position: {"lat": 37.368974057237, "lng": -121.92906001129631}
        },
        {
            position: {"lat": 37.36894500234035, "lng": -121.9290275854002}
        },
        { // 20
            position: {"lat": 37.36890983003666, "lng": -121.92899547578793},
            heading: 146
        },
        // end 14

        // start 15
        { // 21
            position: {"lat": 37.369007000469, "lng": -121.9290581500681},
            heading: 146
        },
        {
            position: {"lat": 37.36897662227467, "lng": -121.92902867786279}
        },
        {
            position: {"lat": 37.36894952748597, "lng": -121.9290001774794}
        },
        {
            position: {"lat": 37.36892126457891, "lng": -121.92896956539948}
        },
        {
            position: {"lat": 37.36889361117073, "lng": -121.92893937691161}
        },
        {
            position: {"lat": 37.36886573723426, "lng": -121.9289094597193}
        },
        {
            position: {"lat": 37.36883825457053, "lng": -121.92887980181598}
        },
        {
            position: {"lat": 37.36881048398738, "lng": -121.92884965750977}
        },
        {
            position: {"lat": 37.36878296476716, "lng": -121.9288204386661}
        },
        {
            position: {"lat": 37.36875652773944, "lng": -121.92879227087252}
        },
        {
            position: {"lat": 37.36872844873769, "lng": -121.92876276644301}
        },
        {
            position: {"lat": 37.36870211965022, "lng": -121.9287347333709}
        },
        {
            position: {"lat": 37.36867080694005, "lng": -121.92870226078878}
        },
        {
            position: {"lat": 37.36864072585097, "lng": -121.9286688816303}
        },
        {
            position: {"lat": 37.36861253847818, "lng": -121.92863848942898}
        },
        {
            position: {"lat": 37.36858319325665, "lng": -121.92860537659232}
        },
        {
            position: {"lat": 37.368557068208, "lng": -121.92857718716459}
        },
        {
            position: {"lat": 37.36852791522301, "lng": -121.92854480496067}
        },
        {
            position: {"lat": 37.36849948736518, "lng": -121.9285128009023}
        },
        {
            position: {"lat": 37.368472386372, "lng": -121.9284826890368}
        },
        {
            position: {"lat": 37.36844462589376, "lng": -121.9284543317699}
        },
        { // 42
            position: {"lat": 37.36841574128845, "lng": -121.9284222009548}
        },
        // end 15

        // start 16
        { // 43
            position: {"lat": 37.36838609509458, "lng": -121.92839159981742}
        },
        {
            position: {"lat": 37.3683570201328, "lng": -121.92836386603017}
        },
        {
            position: {"lat": 37.36832987139939, "lng": -121.92833528033572}
        },
        {
            position: {"lat": 37.36830302039294, "lng": -121.92830736075399}
        },
        {
            position: {"lat": 37.36827636355101, "lng": -121.92827833465549}
        },
        {
            position: {"lat": 37.36824908226607, "lng": -121.9282498603202}
        },
        {
            position: {"lat": 37.36822181508123, "lng": -121.92822163539171}
        },
        {
            position: {"lat": 37.36819604785329, "lng": -121.9281952789629}
        },
        {
            position: {"lat": 37.36816963020272, "lng": -121.92816718963599}
        },
        {
            position: {"lat": 37.36814407097661, "lng": -121.928137279574}
        },
        {
            position: {"lat": 37.36811932990273, "lng": -121.92810803500618}
        },
        { // 54
            position: {"lat": 37.36809254171072, "lng": -121.92807861759002}
        },
        //end 16

        //start 17
        { // 55
            position: {"lat": 37.3680667254644, "lng": -121.9280495767303}
        },
        {
            position: {"lat": 37.36803976343761, "lng": -121.92802302640712}
        },
        {
            position: {"lat": 37.36801621819496, "lng": -121.9279951839012}
        },
        {
            position: {"lat": 37.36799196565877, "lng": -121.92796411919232}
        },
        {
            position: {"lat": 37.36796502213984, "lng": -121.92792880377283}
        },
        {
            position: {"lat": 37.36793873653897, "lng": -121.92789319727132}
        },
        {
            position: {"lat": 37.36791074990956, "lng": -121.92785615809902}
        },
        {
            position: {"lat": 37.36790172208713, "lng": -121.92783948620126}
        },
        {
            position: {"lat": 37.36785164628962, "lng": -121.92778957021261}
        },
        {
            position: {"lat": 37.36782074616819, "lng": -121.9277536386872}
        },
        {
            position: {"lat": 37.36779880789807, "lng": -121.92772934723581}
        },
        {
            position: {"lat": 37.36777450041851, "lng": -121.92769131499671}
        },
        {
            position: {"lat": 37.36774208533307, "lng": -121.92765741337149}
        },
        {
            position: {"lat": 37.36771112826217, "lng": -121.92762632274787}
        },
        { // 69
            position: {"lat": 37.36767998233058, "lng": -121.92759344057998}
        },
        //end 17

        //start 18
        { // 70
            position: {"lat": 37.36761448303542, "lng": -121.92752178281933}
        },
        {
            position: {"lat": 37.36757884979086, "lng": -121.92748280441947}
        },
        {
            position: {"lat": 37.36754914739902, "lng": -121.9274499193076}
        },
        {
            position: {"lat": 37.36751806954395, "lng": -121.92741736778561}
        },
        { // 74
            position: {"lat": 37.36748658713157, "lng": -121.92738202643051}
        },
        //end 18

        //start 19
        { // 75
            position: {"lat": 37.36745869641338, "lng": -121.9273513057293}
        },
        {
            position: {"lat": 37.36743030779697, "lng": -121.92731694140258}
        },
        {
            position: {"lat": 37.36741166264678, "lng": -121.9272498073222}
        },
        {
            position: {"lat": 37.36738489543548, "lng": -121.92722057559513}
        },
        {
            position: {"lat": 37.36735986635117, "lng": -121.92718799688737}
        },
        {
            position: {"lat": 37.36733022503365, "lng": -121.9271562157374}
        },
        {
            position: {"lat": 37.36729979846682, "lng": -121.9271228420148}
        },
        {
            position: {"lat": 37.36726684784153, "lng": -121.92708728696562}
        },
        {
            position: {"lat": 37.36723488511537, "lng": -121.92705335184758}
        },
        { // 84
            position: {"lat": 37.36720575086317, "lng": -121.92702131738702}
        },
        //end 19

        //start 20
        { // 85
            position: {"lat": 37.36717638802399, "lng": -121.92698842294539}
        },
        {
            position: {"lat": 37.36714745485294, "lng": -121.92695684291851}
        },
        {
            position: {"lat": 37.36711804186531, "lng": -121.92692588020549}
        },
        {
            position: {"lat": 37.36708696535243, "lng": -121.92689213066978}
        },
        {
            position: {"lat": 37.36705421671119, "lng": -121.9268577075888}
        },
        {
            position: {"lat": 37.36702427259836, "lng": -121.92682644567412}
        },
        {
            position: {"lat": 37.36699451430302, "lng": -121.92679322423533}
        },
        {
            position: {"lat": 37.36696253425912, "lng": -121.9267592322368}
        },
        {
            position: {"lat": 37.36693306835996, "lng": -121.92672703790748}
        },
        {
            position: {"lat": 37.36690277164225, "lng": -121.92669409046403}
        },
        { // 95
            position: {"lat": 37.36687231295843, "lng": -121.92666088105142}
        },
        //end 20

        //start 21
        { // 96
            position: {"lat": 37.36683817521973, "lng": -121.92662607014847}
        },
        {
            position: {"lat": 37.36680828535054, "lng": -121.92659363970688}
        },
        {
            position: {"lat": 37.36677825804519, "lng": -121.92656072655518}
        },
        {
            position: {"lat": 37.36674626168617, "lng": -121.92652426199328}
        },
        {
            position: {"lat": 37.36671808789406, "lng": -121.92649192107461}
        },
        {
            position: {"lat": 37.36668699144773, "lng": -121.92645768532822}
        },
        {
            position: {"lat": 37.3666554649978, "lng": -121.92642431668617}
        },
        {
            position: {"lat": 37.36662499872217, "lng": -121.92639282381072}
        },
        {
            position: {"lat": 37.36659475528192, "lng": -121.92635990452573}
        },
        { // 105
            position: {"lat": 37.36656432541402, "lng": -121.92632934809109}
        },
        //end 21

        //start 22
        { // 106
            position: {"lat": 37.36653587021728, "lng": -121.9262993321513}
        },
        {
            position: {"lat": 37.36650585387826, "lng": -121.92626796127189}
        },
        {
            position: {"lat": 37.36647496895129, "lng": -121.92623487642277}
        },
        {
            position: {"lat": 37.36644400508906, "lng": -121.92620021497811}
        },
        {
            position: {"lat": 37.36641101389356, "lng": -121.92616577976429}
        },
        {
            position: {"lat": 37.36638017731072, "lng": -121.9261318868181}
        },
        {
            position: {"lat": 37.36634828073399, "lng": -121.92609731646587}
        },
        {
            position: {"lat": 37.36631614058001, "lng": -121.92606190048377}
        },
        {
            position: {"lat": 37.3662841232537, "lng": -121.92602767473818}
        },
        { // 115
            position: {"lat": 37.36625196543984, "lng": -121.92599559861412}
        },
        //end 22

        //start 23
        { // 116
            position: {"lat": 37.36621987830083, "lng": -121.92596009470503}
        },
        {
            position: {"lat": 37.36618914386071, "lng": -121.92592861291143}
        },
        {
            position: {"lat": 37.36615807469914, "lng": -121.92589583448182}
        },
        {
            position: {"lat": 37.36612717612715, "lng": -121.92586330452849}
        },
        {
            position: {"lat": 37.36609707140646, "lng": -121.9258294850004}
        },
        {
            position: {"lat": 37.36606666842029, "lng": -121.925794973157}
        },
        {
            position: {"lat": 37.36603576218193, "lng": -121.92576023273432}
        },
        {
            position: {"lat": 37.36600196584224, "lng": -121.92572429419869}
        },
        {
            position: {"lat": 37.3659699778371, "lng": -121.92569339982691}
        },
        {
            position: {"lat": 37.3659413886059, "lng": -121.92566119591612}
        },
        {
            position: {"lat": 37.36590911653554, "lng": -121.92562611682843}
        },
        { // 127
            position: {"lat": 37.36587739774173, "lng": -121.92559233892939}
        },
        //end 23

        //start 24
        { // 128
            position: {"lat": 37.36584874259647, "lng": -121.92555982592182}
        },
        {
            position: {"lat": 37.36581579321432, "lng": -121.92552633364483}
        },
        {
            position: {"lat": 37.3657866716939, "lng": -121.9254938622251}
        },
        {
            position: {"lat": 37.36575753028181, "lng": -121.92546197737033}
        },
        {
            position: {"lat": 37.36572533413457, "lng": -121.9254278156265}
        },
        {
            position: {"lat": 37.36569587416666, "lng": -121.92539680796187}
        },
        {
            position: {"lat": 37.36566698261796, "lng": -121.92536373256019}
        },
        {
            position: {"lat": 37.36563528945013, "lng": -121.92533181913188}
        },
        {
            position: {"lat": 37.36560391555254, "lng": -121.92529776286341}
        },
        { // 137
            position: {"lat": 37.36557421972093, "lng": -121.92526502772807}
        },
        //end 24

        //start 25
        { // 138
            position: {"lat": 37.36554436449253, "lng": -121.92523135026227}
        },
        {
            position: {"lat": 37.36551430984558, "lng": -121.92519856613433}
        },
        {
            position: {"lat": 37.36548293259453, "lng": -121.92516352770303}
        },
        {
            position: {"lat": 37.36545271886491, "lng": -121.92512895678897}
        },
        {
            position: {"lat": 37.36541943982929, "lng": -121.9250940372014}
        },
        {
            position: {"lat": 37.36538736499687, "lng": -121.92505932277527}
        },
        {
            position: {"lat": 37.36535535281704, "lng": -121.9250254015613}
        },
        {
            position: {"lat": 37.36532414614139, "lng": -121.92499146049249}
        },
        {
            position: {"lat": 37.36529393945793, "lng": -121.9249605165827}
        },
        { // 147
            position: {"lat": 37.36526476874169, "lng": -121.92492859553352}
        },
        //end 25

        //start 26
        { // 148
            position: {"lat": 37.36523623388552, "lng": -121.92489699308459}
        },
        {
            position: {"lat": 37.36520563749835, "lng": -121.92486603572956}
        },
        {
            position: {"lat": 37.36517632712034, "lng": -121.92483559084661}
        },
        {
            position: {"lat": 37.36514570851111, "lng": -121.92480370312302}
        },
        {
            position: {"lat": 37.36511505071538, "lng": -121.92477201806531}
        },
        {
            position: {"lat": 37.36508618249879, "lng": -121.92473947287948}
        },
        {
            position: {"lat": 37.36505599816808, "lng": -121.92470688984713}
        },
        {
            position: {"lat": 37.36502707397803, "lng": -121.92467432153552}
        },
        {
            position: {"lat": 37.36499658855026, "lng": -121.92464201536069}
        },
        {
            position: {"lat": 37.36496620780991, "lng": -121.92460932279789}
        },
        { // 158
            position: {"lat": 37.36493625462348, "lng": -121.92457790766343}
        },
        //end 26

        //start 27
        { // 159
            position: {"lat": 37.36490523445992, "lng": -121.92454536568391}
        },
        {
            position: {"lat": 37.36487604041547, "lng": -121.92451321542683}
        },
        {
            position: {"lat": 37.36484445610913, "lng": -121.92448073340609}
        },
        {
            position: {"lat": 37.36481407405849, "lng": -121.92444907084399}
        },
        {
            position: {"lat": 37.36478235666638, "lng": -121.92441570607787}
        },
        {
            position: {"lat": 37.3647513963253, "lng": -121.92438339303402}
        },
        {
            position: {"lat": 37.36471942327296, "lng": -121.92435239565611}
        },
        {
            position: {"lat": 37.3646896705916, "lng": -121.92432118242021}
        },
        {
            position: {"lat": 37.36465850910748, "lng": -121.92428908246018}
        },
        { // 168
            position: {"lat": 37.36462835121129, "lng": -121.92425844302761}
        },
        //end 27

        //start 28
        { // 169
            position: {"lat": 37.36459950100904, "lng": -121.92422677980858}
        },
        {
            position: {"lat": 37.36457031837251, "lng": -121.92419694475211}
        },
        {
            position: {"lat": 37.36453916562814, "lng": -121.9241672582803}
        },
        {
            position: {"lat": 37.36450922079189, "lng": -121.92413721360572}
        },
        {
            position: {"lat": 37.36447970263377, "lng": -121.9241077977249}
        },
        {
            position: {"lat": 37.36445014743225, "lng": -121.9240781810326}
        },
        {
            position: {"lat": 37.36442182259029, "lng": -121.92404788895118}
        },
        {
            position: {"lat": 37.36439326398122, "lng": -121.92401521520259}
        },
        {
            position: {"lat": 37.36436300935939, "lng": -121.92398704164123}
        },
        {
            position: {"lat": 37.36431368064744, "lng": -121.92398938994239}
        }
        //end 28
    ];

    angular.module('demoApp')
        .value('AIRPORT_SOUTH_PATHS', paths)
    ;

}());
(function(){
'use strict';

    var places = [
        // Starting From Gate 1
        {
            type: 'store',
            name: 'Sunset News',
            position: {lat: 37.3710524, lng: -121.93173360000003}
        },
        {
            type: 'store',
            name: 'Access Point',
            position: {lat: 37.3707253, lng: -121.93129069999998}
        },
        {
            type: 'food',
            name: 'Grab N Go',
            position: {lat: 37.3701053, lng: -121.93067539999998}
        },
        {
            type: 'store',
            name: 'Sunglass Icon',
            position: {lat: 37.3697693, lng: -121.92999250000003}
        },
        {
            type: 'store',
            name: 'InMotion',
            position: {lat: 37.3697346, lng: -121.92996929999998}
        },
        {
            type: 'store',
            name: 'InMotion Entertainment',
            position: {lat: 37.369717, lng: -121.92996340000002}
        },
        {
            type: 'store',
            name: 'Hicklebees',
            position: {lat: 37.3698053, lng: -121.92986710000002}
        },
        {
            type: 'store',
            name: 'Authors Bookstore',
            position: {lat: 37.3698059, lng: -121.92982189999998}
        },
        {
            type: 'store',
            name: 'CNN Newsstand',
            position: {lat: 37.3696457, lng: -121.92972370000001}
        },
        {
            type: 'store',
            name: 'Hudson News',
            position: {lat: 37.369603, lng: -121.9298111}
        },
        {
            type: 'food',
            name: 'Einstein Bros Bagels',
            position: {lat: 37.36963069999999, lng: -121.93005649999998}
        },
        {
            type: 'bar',
            name: 'Sip Savvy',
            position: {lat: 37.3696035, lng: -121.92999829999997}
        },
        {
            type: 'store',
            name: 'Red Mango',
            position: {lat: 37.3695808, lng: -121.92989239999997}
        },
        {
            type: 'food',
            name: 'Gordon Biersch Brewing Company',
            position: {lat: 37.3694546, lng: -121.92992800000002}
        },
        {
            type: 'store',
            name: 'Discover San Jose',
            position: {lat: 37.3693658, lng: -121.92981609999998}
        },
        {
            type: 'coffee',
            name: 'First class deli',
            position: {lat: 37.3693272, lng: -121.92972989999998}
        },
        {
            type: 'coffee',
            name: "Peet's Coffee & Tea",
            position: {lat: 37.3692853, lng: -121.92968780000001}
        },
        {
            type: 'food',
            name: 'Sora',
            position: {lat: 37.3693134, lng: -121.92980849999998}
        },
        {
            type: 'food',
            name: 'Tres Gringos Cabo Cantina',
            position: {lat: 37.36920569999999, lng: -121.92965600000002}
        },
        {
            type: 'food',
            name: 'Sonoma Chicken',
            position: {lat: 37.3692995, lng: -121.92935950000003}
        },
        {
            type: 'store',
            name: 'Blue Dot',
            position: {lat: 37.3692132, lng: -121.92932669999999}
        },
        {
            type: 'store',
            name: 'CNN News',
            position: {lat: 37.3691655, lng: -121.92933390000002}
        },
        {
            type: 'coffee',
            name: 'Starbucks',
            position: {lat: 37.36921299999999, lng: -121.92923080000003}
        },
        {
            type: 'food',
            name: 'Fresh Attractions',
            position: {lat: 37.3689633, lng: -121.92898450000001}
        },
        {
            type: 'bar',
            name: 'The Club at SJC',
            position: {lat: 37.3685391, lng: -121.92839400000003}
        },
        {
            type: 'atm',
            name: 'U.S.Bank ATM',
            position: {lat: 37.3684229, lng: -121.92840839999997}
        },
        {
            type: 'atm',
            name: 'U.S.Bank ATM',
            position: {lat: 37.3684079, lng: -121.92824239999999}
        },
        {
            type: 'currency_exchange',
            name: 'Foreign Currency Exchange',
            position: {lat: 37.3682352, lng: -121.92830939999999}
        },
        {
            type: 'bar',
            name: "Shark's Cage",
            position: {lat: 37.3672344, lng: -121.92691480000002}
        },
        {
            type: 'food',
            name: 'Pizza My Heart',
            position: {lat: 37.367263434691, lng: -121.9269709289074}
        },
        {
            type: 'store',
            name: "Menchie's Frozen Yogurt",
            position: {lat: 37.36710355578179, lng: -121.92697495222092}
        },
        {
            type: 'atm',
            name: 'U.S.Bank ATM',
            position: {lat: 37.3669384, lng: -121.92684170000001}
        },
        //{
        //    type: 'store',
        //    name: 'Firefly',
        //    position: {lat: 37.3669366, lng: -121.92673050000002}
        //},
        {
            type: 'food',
            name: 'Le Boulanger',
            position: {lat: 37.3669529, lng: -121.92661399999997}
        },
        {
            type: 'food',
            name: 'The Brit',
            position: {lat: 37.3668613, lng: -121.92653239999999}
        },
        {
            type: 'store',
            name: 'Sunset News',
            position: {lat: 37.3667208, lng: -121.92635630000001}
        },
        {
            type: 'store',
            name: 'CJ Olson',
            position: {lat: 37.3665451, lng: -121.92641349999997}
        },
        {
            type: 'store',
            name: 'Sunglass Icon',
            position: {lat: 37.3664996, lng: -121.9263621}
        },
        {
            type: 'store',
            name: 'Hudson Booksellers',
            position: {lat: 37.3663129, lng: -121.92591830000003}
        },
        {
            type: 'store',
            name: 'Discover San José',
            position: {lat: 37.3662213, lng: -121.92581630000001}
        },
        {
            type: 'food',
            name: 'Sushi Boat',
            position: {lat: 37.3662132, lng: -121.92579269999999}
        },
        {
            type: 'food',
            name: 'Una Mas',
            position: {lat: 37.36622847918345, lng: -121.92582495510578}
        },
        {
            type: 'food',
            name: 'Smashburger',
            position: {lat: 37.366079, lng: -121.92593979999998}
        },
        {
            type: 'coffee',
            name: 'Starbucks Coffee',
            position: {lat: 37.36602756186122, lng: -121.92588061094284}
        },
        {
            type: 'food',
            name: 'Brioche Doree Café',
            position: {lat: 37.3658617, lng: -121.92571529999998}
        },
        {
            type: 'bar',
            name: 'Santa Cruz Wine Bar',
            position: {lat: 37.3658617, lng: -121.92571529999998}
        },
        {
            type: 'food',
            name: 'The Soup and Salad Station',
            position: {lat: 37.3659219, lng: -121.92548679999999}
        },
        {
            type: 'food',
            name: 'Jamba Juice',
            position: {lat: 37.3658437, lng: -121.92541040000003}
        },
        {
            type: 'store',
            name: 'Hudson News',
            position: {lat: 37.3657283, lng: -121.92556719999999}
        },
        {
            type: 'atm',
            name: 'Bank of America ATM',
            position: {lat: 37.36574350541866, lng: -121.92542932927608}
        },
        {
            type: 'food',
            name: "San Jose Joe's",
            position: {lat: 37.365741, lng: -121.92530720000002}
        },
        {
            type: 'coffee',
            name: "Peet's Coffee & Tea",
            position: {lat: 37.3651985, lng: -121.9249964}
        },
        {
            type: 'store',
            name: 'Zipcar',
            position: {lat: 37.3649491, lng: -121.9246597}
        },
        {
            type: 'store',
            name: 'Hudson News',
            position: {lat: 37.3646043, lng: -121.9243204}
        },
        {
            type: 'food',
            name: 'Flames eatery and bar',
            position: {lat: 37.36451479999999, lng: -121.92399469999998}
        },
        {
            type: 'store',
            name: 'Best Buy Express Kiosk',
            position: {lat: 37.3644089, lng: -121.92382090000001}
        },
        {
            type: 'atm',
            name: 'Bank of America ATM',
            position: {lat: 37.36443885713914, lng: -121.92397087812424}
        },
    ];

    angular.module('demoApp')
        .value('AVERAGE_WALKING_TIME', 4) // 5 kph
        .value('AIRPORT_PLACES', places);
    ;

}());
(function () {
    'use strict';

    var paths = [
        // GATE 11
        { // 0
            position: {"lat": 37.369379060667, "lng": -121.92972332033},
            heading: -44
        },
        { // 1
            position: {"lat": 37.369411675383, "lng": -121.92976047187},
            heading: -44
        },
        { // 2
            position: {"lat": 37.369442744334, "lng": -121.92979579528}
        },
        { // 3
            position: {"lat": 37.369471384216, "lng": -121.92982760799}
        },
        { // 4
            position: {"lat": 37.369504027008, "lng": -121.92986616192}
        },
        { // 5
            position: {"lat": 37.369533469053, "lng": -121.92989994916},
            heading: -2
        },
        { // 6
            position: {"lat": 37.369574664734, "lng": -121.92990442266}
        },


        // GATE 10
        { // 7
            position: {"lat": 37.36962050362, "lng": -121.92990178266}
        },
        { // 8
            position: {"lat": 37.369660693943, "lng": -121.92990065358}
        },
        { // 9
            position: {"lat": 37.369711802907, "lng": -121.92990237375},
            heading: -51
        },
        { // 10
            position: {"lat": 37.369745716028, "lng": -121.92992556237}
        },
        { // 11
            position: {"lat": 37.369776205073, "lng": -121.92996203767}
        },
        { // 12
            position: {"lat": 37.369808734965, "lng": -121.93000121112}
        },
        { // 13
            position: {"lat": 37.369838182256, "lng": -121.93003690475}
        },

        // GATE 9
        { // 14
            position: {"lat": 37.369862931805, "lng": -121.93006720851}
        },
        { // 15
            position: {"lat": 37.369891063479, "lng": -121.93010208881}
        },
        { // 16
            position: {"lat": 37.369916961437, "lng": -121.93013290195}
        },
        { // 17
            position: {"lat": 37.369944531673, "lng": -121.93016542236}
        },
        { // 18
            position: {"lat": 37.369971885592, "lng": -121.93019956352}
        },

        // GATE 8
        { // 19
            position: {"lat": 37.370001076154, "lng": -121.9302321116}
        },
        { // 20
            position: {"lat": 37.370030608041, "lng": -121.93026376793}
        },
        { // 21
            position: {"lat": 37.370051185248, "lng": -121.93029653093}
        },
        { // 22
            position: {"lat": 37.370107330815, "lng": -121.93030615612},
            heading: -86
        },
        { // 23
            position: {"lat": 37.370111897775, "lng": -121.93037747455}
        },
        { // 24
            position: {"lat": 37.370117428453, "lng": -121.93044105293}
        },
        { // 25
            position: {"lat": 37.370121001001, "lng": -121.93050536947}
        },
        { // 26
            position: {"lat": 37.370124795172, "lng": -121.93056343063}
        },
        { // 27
            position: {"lat": 37.370128582893, "lng": -121.93062393464}
        },
        { // 28
            position: {"lat": 37.37014343578, "lng": -121.930684373},
            heading: -51
        },
        { // 29
            position: {"lat": 37.370182672018, "lng": -121.93072657961},
            heading: -37
        },
        { // 30
            position: {"lat": 37.370217305275, "lng": -121.9307645182}
        },
        { // 31
            position: {"lat": 37.370254504745, "lng": -121.93080591173}
        },
        { // 32
            position: {"lat": 37.370291989076, "lng": -121.93084595343}
        },
        { // 33
            position: {"lat": 37.370336024608, "lng": -121.93088897126}
        },

        // GATE 7
        { // 34
            position: {"lat": 37.370361925926, "lng": -121.93091768029}
        },
        { // 35
            position: {"lat": 37.370394850435,  "lng": -121.93095390576}
        },
        { // 36
            position: {"lat": 37.370423393392,  "lng": -121.93098667786}
        },
        { // 37
            position: {"lat": 37.37045245345, "lng": -121.93101783053}
        },
        { // 38
            position: {"lat": 37.37047869784, "lng": -121.93104599213}
        },
        { // 39
            position: {"lat": 37.370516844569,  "lng": -121.93108726807}
        },
        { // 40
            position: {"lat": 37.370549536636,  "lng": -121.93112216494}
        },
        { // 41
            position: {"lat": 37.370586865206, "lng": -121.93116445766}
        },
        { // 42
            position: {"lat": 37.370629793522, "lng": -121.93121240406}
        },

        // GATE 6
        { // 43
            position: {"lat": 37.370667458097, "lng": -121.93125267516}
        },
        { // 44
            position: {"lat": 37.370702990517, "lng": -121.93129174124}
        },
        { // 45
            position: {"lat": 37.370738248931, "lng": -121.93133119355}
        },
        { // 46
            position: {"lat": 37.370773329814, "lng": -121.93136955218}
        },
        { // 47
            position: {"lat": 37.370806413633, "lng": -121.93140583837}
        },
        { // 48
            position: {"lat": 37.370836681469, "lng": -121.93144029443}
        },
        { // 49
            position: {"lat": 37.370865384564, "lng": -121.93147449753}
        },
        { // 50
            position: {"lat": 37.370890577208, "lng": -121.93150292729}
        },
        { // 51
            position: {"lat": 37.370916749028, "lng": -121.9315306274}
        },

        // GATE 5
        { // 52
            position: {"lat": 37.370947825792, "lng": -121.93155796092}
        },
        { // 53
            position: {"lat": 37.370978577431, "lng": -121.93159191988}
        },
        { // 54
            position: {"lat": 37.371006231364, "lng": -121.93161997203}
        },
        { // 55
            position: {"lat": 37.371033826379, "lng": -121.93164988434}
        },
        { // 56
            position: {"lat": 37.371064422895, "lng": -121.93168300076}
        },
        { // 57
            position: {"lat": 37.371093814691, "lng": -121.93171464959}
        },
        { // 58
            position: {"lat": 37.371119605253, "lng": -121.93174232858}
        },
        { // 59
            position: {"lat": 37.37114138588, "lng": -121.93177104103}
        },
        { // 60
            position: {"lat": 37.371164233846, "lng": -121.93179830536}
        },
        { // 61
            position: {"lat": 37.371191117455, "lng": -121.93182659256}
        },
        { // 62
            position: {"lat": 37.371221056547, "lng": -121.9318618656},
            heading: -68
        },

        // GATE 4
        { // 63
            position: {"lat": 37.371226637001,"lng": -121.93192633885},
            heading: -45
        },
        { // 64
            position: {"lat": 37.371259581079, "lng": -121.9319544125}
        }
    ];

    var gate3ExtendedPath = [
        // connect paths from gate 5 here
        { position: {lat: 37.37124608324751, lng: -121.93189078078211}, heading: 31 },
        { position: {lat: 37.37127892302216, lng: -121.9319263964972} }
    ];

    var gate2ExtendedPath = [
        // connect paths from gate 3 here
        { position: {lat: 37.37124608324751, lng: -121.93189078078211}, heading: 32 },
        { position: {lat: 37.37130771107147, lng: -121.93187890075552} },
        { position: {lat: 37.37133531303971, lng: -121.93184730758173} }
    ];

    var gate1ExtendedPath = [
        // connect paths from gate 6 here : 0 - 58
        { position: {"lat": 37.37118451111, "lng": -121.93173762807}, heading: 24 },
        { position: {"lat": 37.371184519818, "lng": -121.93170712416}, heading: 60 },
        { position: {"lat": 37.37118985448, "lng": -121.93163104842}, heading: 135 }
    ];

    var rawExtendedPaths = gate1ExtendedPath.concat(gate2ExtendedPath).concat(gate3ExtendedPath);

    var extendedPaths = {
        1: (paths.slice(0, 59)).concat(gate1ExtendedPath),
        2: (paths.slice(0, 63)).concat(gate2ExtendedPath),
        3: (paths.slice(0, 63)).concat(gate3ExtendedPath)
    };


    angular.module('demoApp')
        .value('AIRPORT_PATHS', paths)
        .value('RAW_EXTENDED_PATHS', rawExtendedPaths)
        .value('AIRPORT_EXTENDED_PATHS', extendedPaths)
    ;


}());
(function () {
    'use strict';

    var paths = [
        // GATE 11
        { // 0
            position: {"lat": 37.369379060667, "lng": -121.92972332033}
            //heading: -44
        },
        { // 1
            position: {"lat": 37.369411675383, "lng": -121.92976047187}
            //heading: -44
        },
        { // 2
            position: {"lat": 37.369442744334, "lng": -121.92979579528}
        },
        { // 3
            position: {"lat": 37.369471384216, "lng": -121.92982760799}
        },
        { // 4
            position: {"lat": 37.369504027008, "lng": -121.92986616192}
        },
        { // 5
            position: {"lat": 37.369533469053, "lng": -121.92989994916}
            //heading: -2
        },
        { // 6
            position: {"lat": 37.369574664734, "lng": -121.92990442266}
        },


        // GATE 10
        { // 7
            position: {"lat": 37.36962050362, "lng": -121.92990178266}
        },
        { // 8
            position: {"lat": 37.369660693943, "lng": -121.92990065358}
        },
        { // 9
            position: {"lat": 37.369711802907, "lng": -121.92990237375}
            //heading: -51
        },
        { // 10
            position: {"lat": 37.369745716028, "lng": -121.92992556237}
        },
        { // 11
            position: {"lat": 37.369776205073, "lng": -121.92996203767}
        },
        { // 12
            position: {"lat": 37.369808734965, "lng": -121.93000121112}
        },
        { // 13
            position: {"lat": 37.369838182256, "lng": -121.93003690475}
        },

        // GATE 9
        { // 14
            position: {"lat": 37.369862931805, "lng": -121.93006720851}
        },
        { // 15
            position: {"lat": 37.369891063479, "lng": -121.93010208881}
        },
        { // 16
            position: {"lat": 37.369916961437, "lng": -121.93013290195}
        },
        { // 17
            position: {"lat": 37.369944531673, "lng": -121.93016542236}
        },
        { // 18
            position: {"lat": 37.369971885592, "lng": -121.93019956352}
        },

        // GATE 8
        { // 19
            position: {"lat": 37.370001076154, "lng": -121.9302321116}
        },
        { // 20
            position: {"lat": 37.370030608041, "lng": -121.93026376793}
        },
        { // 21
            position: {"lat": 37.370051185248, "lng": -121.93029653093}
        },
        { // 22
            position: {"lat": 37.370107330815, "lng": -121.93030615612},
            //heading: -86
        },
        { // 23
            position: {"lat": 37.370111897775, "lng": -121.93037747455}
        },
        { // 24
            position: {"lat": 37.370117428453, "lng": -121.93044105293}
        },
        { // 25
            position: {"lat": 37.370121001001, "lng": -121.93050536947}
        },
        { // 26
            position: {"lat": 37.370124795172, "lng": -121.93056343063}
        },
        { // 27
            position: {"lat": 37.370128582893, "lng": -121.93062393464}
        },
        { // 28
            position: {"lat": 37.37014343578, "lng": -121.930684373}
            //heading: -51
        },
        { // 29
            position: {"lat": 37.370182672018, "lng": -121.93072657961}
            //heading: -37
        },
        { // 30
            position: {"lat": 37.370217305275, "lng": -121.9307645182}
        },
        { // 31
            position: {"lat": 37.370254504745, "lng": -121.93080591173}
        },
        { // 32
            position: {"lat": 37.370291989076, "lng": -121.93084595343}
        },
        { // 33
            position: {"lat": 37.370336024608, "lng": -121.93088897126}
        },

        // GATE 7
        { // 34
            position: {"lat": 37.370361925926, "lng": -121.93091768029}
        },
        { // 35
            position: {"lat": 37.370394850435,  "lng": -121.93095390576}
        },
        { // 36
            position: {"lat": 37.370423393392,  "lng": -121.93098667786}
        },
        { // 37
            position: {"lat": 37.37045245345, "lng": -121.93101783053}
        },
        { // 38
            position: {"lat": 37.37047869784, "lng": -121.93104599213}
        },
        { // 39
            position: {"lat": 37.370516844569,  "lng": -121.93108726807}
        },
        { // 40
            position: {"lat": 37.370549536636,  "lng": -121.93112216494}
        },
        { // 41
            position: {"lat": 37.370586865206, "lng": -121.93116445766}
        },
        { // 42
            position: {"lat": 37.370629793522, "lng": -121.93121240406}
        },

        // GATE 6
        { // 43
            position: {"lat": 37.370667458097, "lng": -121.93125267516}
        },
        { // 44
            position: {"lat": 37.370702990517, "lng": -121.93129174124}
        },
        { // 45
            position: {"lat": 37.370738248931, "lng": -121.93133119355}
        },
        { // 46
            position: {"lat": 37.370773329814, "lng": -121.93136955218}
        },
        { // 47
            position: {"lat": 37.370806413633, "lng": -121.93140583837}
        },
        { // 48
            position: {"lat": 37.370836681469, "lng": -121.93144029443}
        },
        { // 49
            position: {"lat": 37.370865384564, "lng": -121.93147449753}
        },
        { // 50
            position: {"lat": 37.370890577208, "lng": -121.93150292729}
        },
        { // 51
            position: {"lat": 37.370916749028, "lng": -121.9315306274}
        },

        // GATE 5
        { // 52
            position: {"lat": 37.370947825792, "lng": -121.93155796092}
        },
        { // 53
            position: {"lat": 37.370978577431, "lng": -121.93159191988}
        },
        { // 54
            position: {"lat": 37.371006231364, "lng": -121.93161997203}
        },
        { // 55
            position: {"lat": 37.371033826379, "lng": -121.93164988434}
        },
        { // 56
            position: {"lat": 37.371064422895, "lng": -121.93168300076}
        },
        { // 57
            position: {"lat": 37.371093814691, "lng": -121.93171464959}
        },
        { // 58
            position: {"lat": 37.371119605253, "lng": -121.93174232858}
        },
        { // 59
            position: {"lat": 37.37114138588, "lng": -121.93177104103}
        },
        { // 60
            position: {"lat": 37.371164233846, "lng": -121.93179830536}
        },
        { // 61
            position: {"lat": 37.371191117455, "lng": -121.93182659256}
        },
        { // 62
            position: {"lat": 37.371221056547, "lng": -121.9318618656}
            //heading: -68
        },

        // GATE 4
        { // 63
            position: {"lat": 37.371226637001,"lng": -121.93192633885}
            //heading: -45
        },
        { // 64
            position: {"lat": 37.371259581079, "lng": -121.9319544125}
        }
    ];

    var gate3ExtendedPath = [
        // connect paths from gate 5 here
        { position: {lat: 37.37124608324751, lng: -121.93189078078211} }, // heading: 31
        { position: {lat: 37.37127892302216, lng: -121.9319263964972} }
    ];

    var gate2ExtendedPath = [
        // connect paths from gate 3 here
        { position: {lat: 37.37124608324751, lng: -121.93189078078211} }, //heading: 32
        { position: {lat: 37.37130771107147, lng: -121.93187890075552} },
        { position: {lat: 37.37133531303971, lng: -121.93184730758173} }
    ];

    var gate1ExtendedPath = [
        // connect paths from gate 6 here : 0 - 58
        { position: {"lat": 37.37118451111, "lng": -121.93173762807} }, // heading: 24
        { position: {"lat": 37.371184519818, "lng": -121.93170712416} },  //heading: 60
        { position: {"lat": 37.37118985448, "lng": -121.93163104842} }  //heading: 135
    ];

    var extendedPaths = {
        1: (paths.slice(0, 59)).concat(gate1ExtendedPath),
        2: (paths.slice(0, 63)).concat(gate2ExtendedPath),
        3: (paths.slice(0, 63)).concat(gate3ExtendedPath)
    };


    angular.module('demoApp')
        .value('AIRPORT_PATHS', paths)
        .value('AIRPORT_EXTENDED_PATHS', extendedPaths)
    ;


}());
(function () {
    'use strict';

    var peopleHeatmapGradient = [
        'rgba(0, 255, 255, 0)',
        'rgba(0, 200, 255, 1)',
        'rgba(0, 100, 200, 1)',
        'rgba(0, 87, 190, 1)',
        'rgba(0, 63, 190, 1)',
        'rgba(5, 42, 190, 1)',
        'rgba(18, 22, 181, 1)',
        'rgba(30, 12, 181, 1)',
        'rgba(45, 0, 153, 1)',
        'rgba(55, 0, 127, 1)',
        'rgba(63, 0, 91, 1)',
        'rgba(127, 0, 63, 1)',
        'rgba(191, 0, 31, 1)',
        'rgba(255, 0, 0, 1)'
    ];


    var people = [
        {
            "lat": 37.371293336535,
            "lng": -121.93178683519
        },
        {
            "lat": 37.371235783258,
            "lng": -121.93175196648
        },
        {
            "lat": 37.371203809197,
            "lng": -121.93177610636
        },
        {
            "lat": 37.371169703516,
            "lng": -121.93165272474
        },
        {
            "lat": 37.371252836086,
            "lng": -121.9317305088
        },
        {
            "lat": 37.371197414383,
            "lng": -121.93186461926
        },
        {
            "lat": 37.371084439247,
            "lng": -121.93179488182
        },
        {
            "lat": 37.370973595551,
            "lng": -121.9316983223
        },
        {
            "lat": 37.371018359371,
            "lng": -121.93165272474
        },
        {
            "lat": 37.370941621378,
            "lng": -121.93163663149
        },
        {
            "lat": 37.370988516827,
            "lng": -121.93166613579
        },
        {
            "lat": 37.371002372296,
            "lng": -121.93168088794
        },
        {
            "lat": 37.370985852314,
            "lng": -121.93171039224
        },
        {
            "lat": 37.370948549117,
            "lng": -121.93166479468
        },
        {
            "lat": 37.370951746534,
            "lng": -121.93163394928
        },
        {
            "lat": 37.37098105619,
            "lng": -121.93166144192
        },
        {
            "lat": 37.370961871689,
            "lng": -121.93169228733
        },
        {
            "lat": 37.370996510367,
            "lng": -121.93166144192
        },
        {
            "lat": 37.370925634286,
            "lng": -121.93162120879
        },
        {
            "lat": 37.370942154281,
            "lng": -121.93166479468
        },
        {
            "lat": 37.370960272981,
            "lng": -121.93160779774
        },
        {
            "lat": 37.370833974894,
            "lng": -121.93152397871
        },
        {
            "lat": 37.370810527125,
            "lng": -121.93147972226
        },
        {
            "lat": 37.370855291042,
            "lng": -121.93148508668
        },
        {
            "lat": 37.370958674272,
            "lng": -121.93152800202
        },
        {
            "lat": 37.370827580049,
            "lng": -121.93141937256
        },
        {
            "lat": 37.370768960607,
            "lng": -121.93133085966
        },
        {"lat": 37.37076896060652, "lng": -121.93135365843773}, {
            "lat": 37.37070181464365,
            "lng": -121.93127185106277
        }, {"lat": 37.37069275526312, "lng": -121.93124167621136}, {
            "lat": 37.370681564262114,
            "lng": -121.9312309473753
        }, {"lat": 37.370674103593856, "lng": -121.93121887743473}, {
            "lat": 37.37065332029977,
            "lng": -121.9311960786581
        }, {"lat": 37.37063786605172, "lng": -121.93117596209049}, {
            "lat": 37.370615484031674,
            "lng": -121.93116255104542
        }, {"lat": 37.3705978981541, "lng": -121.93124435842037}, {
            "lat": 37.3705845755168,
            "lng": -121.93121887743473
        }, {"lat": 37.37057871355567, "lng": -121.93127654492855}, {
            "lat": 37.370569121254604,
            "lng": -121.93128392100334
        }, {"lat": 37.370539811438235, "lng": -121.93124033510685}, {
            "lat": 37.37054620630822,
            "lng": -121.93121753633022
        }, {"lat": 37.37055100246038, "lng": -121.93119272589684}, {
            "lat": 37.37052862041441,
            "lng": -121.93119943141937
        }, {"lat": 37.37052595588467, "lng": -121.93122826516628}, {
            "lat": 37.37053821272064,
            "lng": -121.93118803203106
        }, {"lat": 37.37052009391894, "lng": -121.931222230196}, {
            "lat": 37.37059043747752,
            "lng": -121.93112432956696
        }, {"lat": 37.37055100246038, "lng": -121.93111896514893}, {
            "lat": 37.370515830670854,
            "lng": -121.93120077252388
        }, {"lat": 37.37053288366179, "lng": -121.93116657435894}, {
            "lat": 37.37052275844888,
            "lng": -121.93119540810585
        }, {"lat": 37.37049398152058, "lng": -121.93117395043373}, {
            "lat": 37.37049291570818,
            "lng": -121.93112500011921
        }, {"lat": 37.37052382426082, "lng": -121.93118400871754}, {
            "lat": 37.37052702169659,
            "lng": -121.93116523325443
        },
        {"lat": 37.370539811438235, "lng": -121.93119272589684}, {
            "lat": 37.370511567422504,
            "lng": -121.93117193877697
        }, {"lat": 37.370533949473575, "lng": -121.93117663264275}, {
            "lat": 37.37049931058221,
            "lng": -121.93120144307613
        }, {"lat": 37.37046200714285, "lng": -121.93114578723907}, {
            "lat": 37.370472665270235,
            "lng": -121.93113841116428
        }, {"lat": 37.370470533644905, "lng": -121.9311149418354},
        {"lat": 37.37046200714285, "lng": -121.93099290132523}, {
            "lat": 37.370361820671015,
            "lng": -121.93084269762039
        }, {"lat": 37.370342636012204, "lng": -121.93096473813057}, {
            "lat": 37.37037993951093,
            "lng": -121.93102642893791
        }, {"lat": 37.37037780788293, "lng": -121.93092852830887}, {
            "lat": 37.37030533249493,
            "lng": -121.93084806203842
        }, {"lat": 37.370261634065415, "lng": -121.93082794547081}, {
            "lat": 37.37020834326322,
            "lng": -121.93074747920036
        }, {"lat": 37.37015824987466, "lng": -121.93069383502007}, {
            "lat": 37.370144394250644,
            "lng": -121.93058118224144
        }, {"lat": 37.370116682994926, "lng": -121.9305731356144}, {
            "lat": 37.3701390651638,
            "lng": -121.93045645952225
        }, {"lat": 37.37010815645264, "lng": -121.93047791719437}, {
            "lat": 37.37013267025908,
            "lng": -121.93035185337067
        }, {"lat": 37.3701017615453, "lng": -121.93031564354897}, {
            "lat": 37.370116682994926,
            "lng": -121.93028748035431
        }, {"lat": 37.37005486554145, "lng": -121.93027406930923}, {
            "lat": 37.370063392089754,
            "lng": -121.93020030856133
        }, {"lat": 37.370110288088306, "lng": -121.9302324950695}, {
            "lat": 37.37009430081936,
            "lng": -121.93016946315765
        }, {"lat": 37.3701017615453, "lng": -121.9301238656044}, {
            "lat": 37.37013053862405,
            "lng": -121.93021774291992
        }, {"lat": 37.37003568080414, "lng": -121.93021908402443}, {
            "lat": 37.369963205085625,
            "lng": -121.93025395274162
        }, {"lat": 37.36998878475899, "lng": -121.93025395274162}, {
            "lat": 37.36999731131483,
            "lng": -121.9302150607109
        }, {"lat": 37.369919506456796, "lng": -121.93020835518837}, {
            "lat": 37.369938691223815,
            "lng": -121.93020164966583
        }, {"lat": 37.36994402032489, "lng": -121.9301775097847}, {
            "lat": 37.369941888684494,
            "lng": -121.93023383617401
        }, {"lat": 37.36997492910368, "lng": -121.93023517727852}, {
            "lat": 37.36990245332645,
            "lng": -121.93020835518837
        }, {"lat": 37.36988540019224, "lng": -121.93018421530724}, {
            "lat": 37.369912045712766,
            "lng": -121.93013861775398
        }, {"lat": 37.369891, "lng": -121.93007869999997}, {
            "lat": 37.36991737481572,
            "lng": -121.9302150607109
        }, {"lat": 37.36997492910368, "lng": -121.9302499294281},
        {"lat": 37.36992750011032, "lng": -121.93016476929188}, {
            "lat": 37.36990991407146,
            "lng": -121.93018488585949
        }, {"lat": 37.36991524317458, "lng": -121.93015404045582}, {
            "lat": 37.369892860938926,
            "lng": -121.93017281591892
        }, {"lat": 37.36989978877448, "lng": -121.93014867603779}, {
            "lat": 37.36994988233563,
            "lng": -121.93019896745682
        }, {"lat": 37.36996107344579, "lng": -121.93023651838303}, {
            "lat": 37.36993655958327,
            "lng": -121.93025127053261
        }, {"lat": 37.36992909884092, "lng": -121.93022981286049}, {
            "lat": 37.36996586963533,
            "lng": -121.93027541041374
        }, {"lat": 37.36997652783325, "lng": -121.93026535212994}, {
            "lat": 37.37002822007164,
            "lng": -121.93028546869755
        }, {"lat": 37.3700170289715, "lng": -121.93029820919037}, {
            "lat": 37.37000104168272,
            "lng": -121.9302948564291
        }, {"lat": 37.36999731131483, "lng": -121.93025194108486},
        {
            "lat": 37.36982571419191,
            "lng": -121.93012520670891
        }, {"lat": 37.36984276733971, "lng": -121.93002730607986}, {
            "lat": 37.369794805351674,
            "lng": -121.93008631467819
        }, {"lat": 37.36982784583559, "lng": -121.93005546927452}, {
            "lat": 37.36979587117397,
            "lng": -121.9301050901413
        }, {"lat": 37.36978414712793, "lng": -121.93004071712494}, {
            "lat": 37.36978414712793,
            "lng": -121.93002060055733
        }, {"lat": 37.3697693, "lng": -121.92999250000003}, {
            "lat": 37.369801200285174,
            "lng": -121.93006753921509
        }, {"lat": 37.369703144578104, "lng": -121.93012788891792}, {
            "lat": 37.36978947624,
            "lng": -121.93005546927452
        }, {"lat": 37.36969781545991, "lng": -121.93002730607986}, {
            "lat": 37.36968715722242,
            "lng": -121.93008229136467
        }, {"lat": 37.369570982335375, "lng": -121.93012118339539}, {
            "lat": 37.36969142051761,
            "lng": -121.93006083369255
        }, {"lat": 37.36979267370703, "lng": -121.93004876375198}, {
            "lat": 37.36984063569644,
            "lng": -121.93007290363312
        }, {"lat": 37.36985982048361, "lng": -121.93002060055733}, {
            "lat": 37.3697596332076,
            "lng": -121.92991599440575
        }, {"lat": 37.369504901126675, "lng": -121.93002730607986}, {
            "lat": 37.36952408599972,
            "lng": -121.93003937602043
        }, {"lat": 37.36956032407985, "lng": -121.92994013428688}, {
            "lat": 37.36949424286176,
            "lng": -121.92997500300407
        }, {"lat": 37.369433490722834, "lng": -121.92989453673363}, {
            "lat": 37.36950276947382,
            "lng": -121.9299441576004
        }, {"lat": 37.36947186050053, "lng": -121.92997232079506}, {
            "lat": 37.3695827064147,
            "lng": -121.92993611097336
        }, {"lat": 37.369581640589374, "lng": -121.93000048398972}, {
            "lat": 37.36970527622529,
            "lng": -121.93005681037903
        },
        {"lat": 37.36975643573916, "lng": -121.93006485700607}, {
            "lat": 37.36975643573916,
            "lng": -121.93002328276634
        }, {"lat": 37.36980546357389, "lng": -121.93003937602043}, {
            "lat": 37.36980546357389,
            "lng": -121.93004608154297
        }, {"lat": 37.369817187616576, "lng": -121.93007960915565}, {
            "lat": 37.3698118585065,
            "lng": -121.93009704351425
        }, {"lat": 37.3698480964476, "lng": -121.93008363246918}, {
            "lat": 37.369856623019444,
            "lng": -121.93015068769455
        }, {"lat": 37.369783081305485, "lng": -121.93010777235031}, {
            "lat": 37.3697585673848,
            "lng": -121.93011716008186
        }, {"lat": 37.36974471168697, "lng": -121.930051445961}, {
            "lat": 37.369717,
            "lng": -121.92996340000002
        }, {"lat": 37.36975110662476, "lng": -121.93003803491592}, {
            "lat": 37.369702078754486,
            "lng": -121.93009033799171
        }, {"lat": 37.36967116986331, "lng": -121.93011716008186}, {
            "lat": 37.36963069999999,
            "lng": -121.93005649999998
        }, {"lat": 37.3696008254428, "lng": -121.93011447787285}, {
            "lat": 37.36957631146255,
            "lng": -121.93003803491592
        }, {"lat": 37.36959336466704, "lng": -121.93007692694664}, {
            "lat": 37.36963069999999,
            "lng": -121.93005649999998
        }, {"lat": 37.36961041786766, "lng": -121.93012654781342}, {
            "lat": 37.369688223046225,
            "lng": -121.92996695637703
        }, {"lat": 37.36964665590609, "lng": -121.9299964606762}, {
            "lat": 37.369546468345405,
            "lng": -121.9299964606762
        }, {"lat": 37.36951875686883, "lng": -121.93001255393028}, {
            "lat": 37.369542205041974,
            "lng": -121.92997768521309
        }, {"lat": 37.3695592582542, "lng": -121.92995890974998}, {
            "lat": 37.3696178786417,
            "lng": -121.92993879318237
        }, {"lat": 37.36970101293087, "lng": -121.92991867661476}, {
            "lat": 37.369530480956314,
            "lng": -121.92985832691193
        }, {"lat": 37.36946972884673, "lng": -121.92979663610458}, {
            "lat": 37.36946226805794,
            "lng": -121.92987710237503
        }, {"lat": 37.36943455655027, "lng": -121.92985028028488}, {
            "lat": 37.36943775403245,
            "lng": -121.92977920174599
        }, {"lat": 37.36941963496498, "lng": -121.92974835634232}, {
            "lat": 37.36942389827536,
            "lng": -121.92983284592628
        }, {"lat": 37.369349290308605, "lng": -121.92984223365784}, {
            "lat": 37.36930345966367,
            "lng": -121.92976042628288
        }, {"lat": 37.36926295814016, "lng": -121.92967057228088}, {
            "lat": 37.369240575709924,
            "lng": -121.92971348762512
        }, {"lat": 37.36930559132218, "lng": -121.92976981401443}, {
            "lat": 37.36931944710113,
            "lng": -121.92976176738739
        }, {"lat": 37.36931518378479, "lng": -121.92963033914566}, {
            "lat": 37.369243773200346,
            "lng": -121.92958474159241
        }, {"lat": 37.369210732459194, "lng": -121.92946270108223}, {
            "lat": 37.36912226846765,
            "lng": -121.92955255508423
        }, {"lat": 37.36913612428044, "lng": -121.92953243851662}, {
            "lat": 37.36919474499856,
            "lng": -121.92950025200844
        }, {"lat": 37.36918408668957, "lng": -121.92958071827888}, {
            "lat": 37.36916490172961,
            "lng": -121.92962631583214
        }, {"lat": 37.36917342837909, "lng": -121.92966789007187}, {
            "lat": 37.36905298936531,
            "lng": -121.92952305078506
        }, {"lat": 37.36908603017595, "lng": -121.92957133054733}, {
            "lat": 37.36918941584426,
            "lng": -121.92937150597572
        }, {"lat": 37.3691830208586, "lng": -121.92928299307823}, {
            "lat": 37.36914145343853,
            "lng": -121.92922666668892
        }, {"lat": 37.36901675104012, "lng": -121.92916631698608}, {
            "lat": 37.368953866846084,
            "lng": -121.92914485931396
        }, {"lat": 37.36892615515061, "lng": -121.92907378077507},

        {"lat": 37.368880324247186, "lng": -121.92895643413067}, {
            "lat": 37.36888352175297,
            "lng": -121.92892357707024
        }, {"lat": 37.368838223741434, "lng": -121.92892290651798}, {
            "lat": 37.36877267480576,
            "lng": -121.92884512245655
        }, {"lat": 37.36881157783954, "lng": -121.92889474332333}, {
            "lat": 37.36872790964604,
            "lng": -121.92879147827625
        }, {"lat": 37.36823335943728, "lng": -121.92824363708496}, {
            "lat": 37.36824028742607,
            "lng": -121.92835561931133
        }, {"lat": 37.368880324247186, "lng": -121.92902952432632}, {
            "lat": 37.36791253956284,
            "lng": -121.92798882722855
        }, {"lat": 37.3679871489584, "lng": -121.92790299654007}, {
            "lat": 37.367946646724306,
            "lng": -121.92795932292938
        }, {"lat": 37.36785285199299, "lng": -121.92782789468765}, {
            "lat": 37.367750530334185,
            "lng": -121.92760795354843
        }, {"lat": 37.36762689147695, "lng": -121.92749798297882}, {
            "lat": 37.36767165729363,
            "lng": -121.92764014005661
        }, {"lat": 37.36777824246389, "lng": -121.92774206399918}, {
            "lat": 37.36755441343146,
            "lng": -121.92746847867966
        }, {"lat": 37.367575730510914, "lng": -121.9276025891304}, {
            "lat": 37.367388140003655,
            "lng": -121.92731559276581
        }, {"lat": 37.367503252415986, "lng": -121.9274041056633}, {
            "lat": 37.3673753497247,
            "lng": -121.92719757556915
        }, {"lat": 37.36734550573204, "lng": -121.92736655473709}, {
            "lat": 37.36723039307768,
            "lng": -121.92706882953644
        }, {"lat": 37.367147256050814, "lng": -121.92687302827835}, {
            "lat": 37.367047065152434,
            "lng": -121.92697763442993
        }, {"lat": 37.36710035820015, "lng": -121.92699909210205}, {
            "lat": 37.36709183131506,
            "lng": -121.92704737186432
        }, {"lat": 37.36698311344519, "lng": -121.92692130804062}, {
            "lat": 37.36696819137233,
            "lng": -121.92687571048737
        }, {"lat": 37.36699696965308, "lng": -121.92682676017284}, {
            "lat": 37.3669495387771,
            "lng": -121.92685760557652
        }, {"lat": 37.366993239135816, "lng": -121.92693069577217}, {
            "lat": 37.36696712550989,
            "lng": -121.92694947123528
        }, {"lat": 37.367043334637664, "lng": -121.92700512707233}, {
            "lat": 37.36708969959362,
            "lng": -121.92702993750572
        }, {"lat": 37.367123807129126, "lng": -121.92700378596783}, {
            "lat": 37.367166974456545,
            "lng": -121.92708291113377
        }, {"lat": 37.36711634610706, "lng": -121.92699305713177},

        {"lat": 37.366865868507055, "lng": -121.9266577810049}, {
            "lat": 37.366874395417824,
            "lng": -121.92674495279789
        }, {"lat": 37.3666724139586, "lng": -121.9265665858984}, {
            "lat": 37.36670971928225,
            "lng": -121.92657329142094
        }, {"lat": 37.36663510861639, "lng": -121.92649081349373}, {
            "lat": 37.366837090176055,
            "lng": -121.92655585706234
        }, {"lat": 37.36691596409396, "lng": -121.92660883069038}, {
            "lat": 37.36694047894345,
            "lng": -121.92665442824364
        }, {"lat": 37.36697138895965, "lng": -121.9266376644373}, {
            "lat": 37.36686000625533,
            "lng": -121.92650690674782
        }, {"lat": 37.36671451567964, "lng": -121.92641839385033}, {
            "lat": 37.366674012758544,
            "lng": -121.92641973495483
        }, {"lat": 37.36667614449179, "lng": -121.92651763558388}, {
            "lat": 37.366626581678425,
            "lng": -121.92638352513313
        }, {"lat": 37.366623384076426, "lng": -121.92646734416485}, {
            "lat": 37.366472030759866,
            "lng": -121.92629635334015
        }, {"lat": 37.36651359965893, "lng": -121.92632250487804}, {
            "lat": 37.36655463560076,
            "lng": -121.9263855367899
        }, {"lat": 37.36650880324866, "lng": -121.92633859813213}, {
            "lat": 37.366477893041896,
            "lng": -121.92620180547237
        }, {"lat": 37.36644858162716, "lng": -121.92616291344166}, {
            "lat": 37.36637183895981,
            "lng": -121.92626617848873
        }, {"lat": 37.366393689310605, "lng": -121.92620247602463}, {
            "lat": 37.36634359337501,
            "lng": -121.92623063921928
        }, {"lat": 37.366408611497704, "lng": -121.92621387541294}, {
            "lat": 37.3663414616323,
            "lng": -121.92622661590576
        }, {"lat": 37.366352120345105, "lng": -121.92612335085869}, {
            "lat": 37.36632867117493,
            "lng": -121.92617230117321
        }, {"lat": 37.36641500671987, "lng": -121.92618772387505}, {
            "lat": 37.36632813823917,
            "lng": -121.92612536251545
        }, {"lat": 37.366352120345105, "lng": -121.92618034780025}, {
            "lat": 37.36628390455698,
            "lng": -121.92607574164867
        }, {"lat": 37.36628283868481, "lng": -121.92611865699291}, {
            "lat": 37.36615120335397,
            "lng": -121.92594297230244
        }, {"lat": 37.36619010774706, "lng": -121.92602880299091}, {
            "lat": 37.366231143865804,
            "lng": -121.92600399255753
        }, {"lat": 37.3661373469899, "lng": -121.92601874470711}, {
            "lat": 37.366009974908216,
            "lng": -121.92592419683933
        }, {"lat": 37.36605154406324, "lng": -121.92582160234451}, {
            "lat": 37.366097909632074,
            "lng": -121.92585244774818
        }, {"lat": 37.36604941231227, "lng": -121.92594766616821}, {
            "lat": 37.366063801630204,
            "lng": -121.9258001446724
        }, {"lat": 37.365988657383866, "lng": -121.92577801644802}, {
            "lat": 37.36593962705489,
            "lng": -121.92575991153717
        }, {"lat": 37.365920974203966, "lng": -121.92579612135887}, {
            "lat": 37.36593323179225,
            "lng": -121.9257465004921
        }, {"lat": 37.36597266923663, "lng": -121.92583300173283}, {
            "lat": 37.3660019808373,
            "lng": -121.92583501338959
        }, {"lat": 37.365893794327135, "lng": -121.92570760846138}, {
            "lat": 37.36588313554921,
            "lng": -121.92573375999928
        }, {"lat": 37.36597639980464, "lng": -121.92569486796856}, {
            "lat": 37.36584529687539,
            "lng": -121.92568615078926
        }, {"lat": 37.36583517102986, "lng": -121.92562848329544}, {
            "lat": 37.3657584277351,
            "lng": -121.92560970783234
        }, {"lat": 37.3657227207587, "lng": -121.92552588880062}, {
            "lat": 37.36582024872869,
            "lng": -121.92552387714386
        }, {"lat": 37.365868213257606, "lng": -121.92561104893684}, {
            "lat": 37.36589166257168,
            "lng": -121.92545279860497
        }, {"lat": 37.36596467516175, "lng": -121.92548163235188}, {
            "lat": 37.365907117797406,
            "lng": -121.92543737590313
        }, {"lat": 37.3659219, "lng": -121.92548679999999}, {
            "lat": 37.36584156630087,
            "lng": -121.92543670535088
        }, {"lat": 37.365853290963, "lng": -121.92537903785706}, {
            "lat": 37.36581971578933,
            "lng": -121.92538373172283
        }, {"lat": 37.36606220281725, "lng": -121.92567944526672}, {
            "lat": 37.36616932321078,
            "lng": -121.92578807473183
        },

        {"lat": 37.36562412678044, "lng": -121.92546486854553}, {
            "lat": 37.365648642051994,
            "lng": -121.92542999982834
        }, {"lat": 37.365644378527094, "lng": -121.92538037896156}, {
            "lat": 37.36556337150767,
            "lng": -121.92541792988777
        }, {"lat": 37.36560387502831, "lng": -121.92544609308243}, {
            "lat": 37.36554525150451,
            "lng": -121.92530527710915
        }, {"lat": 37.36552606561406, "lng": -121.92534148693085}, {
            "lat": 37.36556123974283,
            "lng": -121.9253146648407
        }, {"lat": 37.36560280914647, "lng": -121.92535355687141}, {
            "lat": 37.365348062952,
            "lng": -121.92516848444939
        }, {"lat": 37.36570619961462, "lng": -121.92528784275055}, {
            "lat": 37.3657818770835,
            "lng": -121.92530661821365
        }, {"lat": 37.36576802065127, "lng": -121.92534551024437}, {
            "lat": 37.36548556205141,
            "lng": -121.92513763904572
        }, {"lat": 37.36537684185413, "lng": -121.92501828074455}, {
            "lat": 37.36534166763893,
            "lng": -121.92505314946175
        }, {"lat": 37.3654354655095, "lng": -121.92509338259697}, {
            "lat": 37.36511569956014,
            "lng": -121.92487478256226
        }, {"lat": 37.36515940098694, "lng": -121.92494586110115}, {
            "lat": 37.3652094977132,
            "lng": -121.92497670650482
        }, {"lat": 37.36519777295047, "lng": -121.92488819360733}, {
            "lat": 37.36535126060834,
            "lng": -121.92516312003136
        }, {"lat": 37.36548662793493, "lng": -121.92521005868912}, {
            "lat": 37.365547383269835,
            "lng": -121.92531064152718
        }, {"lat": 37.36558895268114, "lng": -121.92542463541031}, {
            "lat": 37.365493023235665,
            "lng": -121.92523419857025
        }, {"lat": 37.36533420643964, "lng": -121.92512154579163}, {
            "lat": 37.365097579448864,
            "lng": -121.9248814880848
        }, {"lat": 37.36516046687509, "lng": -121.92487612366676}, {
            "lat": 37.36509438178173,
            "lng": -121.92479029297829
        }, {"lat": 37.36498566101764, "lng": -121.92473664879799}, {
            "lat": 37.36497819978296,
            "lng": -121.92475140094757
        }, {"lat": 37.364968606765856, "lng": -121.92459717392921}, {
            "lat": 37.36489932382805,
            "lng": -121.92466154694557
        }, {"lat": 37.364866281173654, "lng": -121.92460656166077}, {
            "lat": 37.36483537029023,
            "lng": -121.92462533712387
        }, {"lat": 37.364796998141394, "lng": -121.9245770573616},



        //gate 27 28 26
        {"lat": 37.3645635671464, "lng": -121.92398697137833}, {
            "lat": 37.3643248059254,
            "lng": -121.92372679710388
        }, {"lat": 37.36459554403795, "lng": -121.92405939102173}, {
            "lat": 37.364508140502075,
            "lng": -121.9238206744194
        }, {"lat": 37.364335464924686, "lng": -121.9236409664154}, {
            "lat": 37.36419689781592,
            "lng": -121.92379653453827
        }, {"lat": 37.36420755683336, "lng": -121.92391723394394}, {
            "lat": 37.364341860323535,
            "lng": -121.9240352511406
        }, {"lat": 37.36434612392245, "lng": -121.92392528057098}, {
            "lat": 37.364450582020446,
            "lng": -121.92414253950119
        }, {"lat": 37.364582753282974, "lng": -121.92420423030853}, {
            "lat": 37.364544381004926,
            "lng": -121.92424178123474
        }, {"lat": 37.364682947472005, "lng": -121.92414253950119}, {
            "lat": 37.36461686195808,
            "lng": -121.92425519227982
        }, {"lat": 37.36467655210224, "lng": -121.92427933216095}, {
            "lat": 37.3646546,
            "lng": -121.92416750000001
        }, {"lat": 37.364702133578035, "lng": -121.92449390888214}, {
            "lat": 37.36479380046143,
            "lng": -121.92436784505844
        }, {"lat": 37.36494942072794, "lng": -121.92460924386978}, {
            "lat": 37.36467228852208,
            "lng": -121.92432224750519
        }, {"lat": 37.36460833479075, "lng": -121.92428469657898}
    ];



    angular.module('demoApp')
        .value('PEOPLE_HEATMAP_GRADIENT', peopleHeatmapGradient)
        .value('PEOPLE_LOCATIONS', people)
    ;

}());
(function () {
    'use strict';

    var gates = {
        1: {
            position: {lat: 37.37122352653642, lng: -121.93144954741001},
            heading: 135
        },
        2: {
            position: {lat: 37.37149370685669, lng: -121.9318887591362},
            heading: 26
        },
        3: {
            position: {lat: 37.37147079219274, lng: -121.93250834941864},
            heading: -21
        },
        4: {
            position: {lat: 37.371349823966995, lng: -121.93231858313084},
            heading: -107
        },
        5: {
            position: {lat: 37.371055129631536, lng: -121.93210937082767},
            heading: -149,
            pathIndex: [0, 63]
        },
        6: {
            position: {lat: 37.37077269093606, lng: -121.93185925483704},
            heading: -114,
            pathIndex: [0, 52]
        },
        7: {
            position: {lat: 37.37046893492584, lng: -121.93144954741001},
            heading: -151,
            pathIndex: [0, 43]
        },
        8: {
            position: {lat: 37.370170506770705, lng: -121.93118199706078},
            heading: -113,
            pathIndex: [0, 34]
        },
        9: {
            position: {lat: 37.369936026673116, lng: -121.93069852888584},
            heading: -145,
            pathIndex: [0, 19]
        },
        10: {
            position: {lat: 37.36962160902846, lng: -121.9303746521473},
            heading: -141,
            pathIndex: [0, 14]
        },
        11: {
            position: {lat: 37.36937380436299, lng: -121.93016476929188},
            heading: -131,
            pathIndex: [0, 7]
        },

        // AIRPORT_SOUTH_PATHS
        12: {
            position: {lat: 37.369007691456105, lng: -121.92978791892529},
            heading: -148,
            pathIndex: [0, 8]
        },
        13: {
            position: {lat: 37.36871725127072, lng: -121.92933596670628},
            heading: -98,
            pathIndex: [0, 17]
        },
        14: {
            position: {lat: 37.368539256179446, lng: -121.92903958261013},
            heading: -161,
            pathIndex: [0, 21]
        },
        15: {
            position: {lat: 37.36809852998939, lng: -121.92855812609196},
            heading: -136,
            pathIndex: [0, 43]
        },
        16: {
            position: {lat: 37.36769777067435, lng: -121.92810885608196},
            heading: -110,
            pathIndex: [0, 55]
        },
        17: {
            position: {lat: 37.36734657158914, lng: -121.92779034376144},
            heading: -81,
            pathIndex: [0, 70]
        },
        18: {
            position: {lat: 37.36714459140099, lng: -121.9275201112032},
            heading: -80,
            pathIndex: [0, 75]
        },
        19: {
            position: {lat: 37.36676461136759, lng: -121.92712649703026},
            heading: -149,
            pathIndex: [0, 85]
        },
        20: {
            position: {lat: 37.36646243793373, lng: -121.92678920924664},
            heading: -130,
            pathIndex: [0, 96]
        },
        21: {
            position: {lat: 37.366147472794665, lng: -121.92643247544765},
            heading: -126,
            pathIndex: [0, 106]
        },
        22: {
            position: {lat: 37.36584476393618, lng: -121.92608915269375},
            heading: -129,
            pathIndex: [0, 116]
        },
        23: {
            position: {lat: 37.3654269384352, lng: -121.92569956183434},
            heading: -126,
            pathIndex: [0, 128]
        },
        24: {
            position: {lat: 37.36509331589264, lng: -121.92538641393185},
            heading: -126,
            pathIndex: [0, 138]
        },
        25: {
            position: {lat: 37.3648375020757, lng: -121.92505717277527},
            heading: -134,
            pathIndex: [0, 148]
        },
        26: {
            position: {lat: 37.364524128961385, lng: -121.92472793161869},
            heading: -135,
            pathIndex: [0, 159]
        },
        27: {
            position: {lat: 37.36424219862963, lng: -121.92438460886478},
            heading: -130,
            pathIndex: [0, 169]
        },
        28: {
            position: {lat: 37.36394321275375, lng: -121.9239004701376},
            heading: -142
        }
    };

    angular.module('demoApp')
        .value('AIRPORT_GATES', gates);

}());
(function(){
'use strict';

angular.module('demoApp')
    .filter('setDecimal', ["$filter", function ($filter) {
        return function (input, places) {
            if (isNaN(input)) return input;
            // If we want 1 decimal place, we want to mult/div by 10
            // If we want 2 decimal places, we want to mult/div by 100, etc
            // So use the following to create that factor
            var factor = "1" + Array(+(places > 0 && places + 1)).join("0");
            return Math.round(input * factor) / factor;
        };
    }]);
}());